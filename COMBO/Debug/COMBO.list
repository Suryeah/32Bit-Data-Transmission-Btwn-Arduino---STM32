
COMBO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003344  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08003404  08003404  00013404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035a0  080035a0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080035a0  080035a0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035a0  080035a0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035a0  080035a0  000135a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035a4  080035a4  000135a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080035a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000070  08003618  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08003618  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db8a  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023b3  00000000  00000000  0002dc22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c68  00000000  00000000  0002ffd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b70  00000000  00000000  00030c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011496  00000000  00000000  000317b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f21d  00000000  00000000  00042c46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00063f31  00000000  00000000  00051e63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b5d94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d84  00000000  00000000  000b5de8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080033ec 	.word	0x080033ec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080033ec 	.word	0x080033ec

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <lsb_to_msb_bit_reversal>:
  * @note   https://stackoverflow.com/questions/7467997/reversing-the-bits-in-an-integer-x
  * @param  input: 32-bit unsigned integer number for swap
  * @return uint32_t 32-bit swaped number
  */
uint32_t lsb_to_msb_bit_reversal(uint32_t input)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
    input = (((input & 0xaaaaaaaa) >> 1) | ((input & 0x55555555) << 1));
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	085b      	lsrs	r3, r3, #1
 800022c:	4a16      	ldr	r2, [pc, #88]	; (8000288 <lsb_to_msb_bit_reversal+0x68>)
 800022e:	401a      	ands	r2, r3
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	005b      	lsls	r3, r3, #1
 8000234:	4915      	ldr	r1, [pc, #84]	; (800028c <lsb_to_msb_bit_reversal+0x6c>)
 8000236:	400b      	ands	r3, r1
 8000238:	4313      	orrs	r3, r2
 800023a:	607b      	str	r3, [r7, #4]
    input = (((input & 0xcccccccc) >> 2) | ((input & 0x33333333) << 2));
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	089b      	lsrs	r3, r3, #2
 8000240:	4a13      	ldr	r2, [pc, #76]	; (8000290 <lsb_to_msb_bit_reversal+0x70>)
 8000242:	401a      	ands	r2, r3
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	009b      	lsls	r3, r3, #2
 8000248:	4912      	ldr	r1, [pc, #72]	; (8000294 <lsb_to_msb_bit_reversal+0x74>)
 800024a:	400b      	ands	r3, r1
 800024c:	4313      	orrs	r3, r2
 800024e:	607b      	str	r3, [r7, #4]
    input = (((input & 0xf0f0f0f0) >> 4) | ((input & 0x0f0f0f0f) << 4));
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	091b      	lsrs	r3, r3, #4
 8000254:	4a10      	ldr	r2, [pc, #64]	; (8000298 <lsb_to_msb_bit_reversal+0x78>)
 8000256:	401a      	ands	r2, r3
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	011b      	lsls	r3, r3, #4
 800025c:	490f      	ldr	r1, [pc, #60]	; (800029c <lsb_to_msb_bit_reversal+0x7c>)
 800025e:	400b      	ands	r3, r1
 8000260:	4313      	orrs	r3, r2
 8000262:	607b      	str	r3, [r7, #4]
    input = (((input & 0xff00ff00) >> 8) | ((input & 0x00ff00ff) << 8));
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	0a1b      	lsrs	r3, r3, #8
 8000268:	4a0d      	ldr	r2, [pc, #52]	; (80002a0 <lsb_to_msb_bit_reversal+0x80>)
 800026a:	401a      	ands	r2, r3
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	021b      	lsls	r3, r3, #8
 8000270:	490c      	ldr	r1, [pc, #48]	; (80002a4 <lsb_to_msb_bit_reversal+0x84>)
 8000272:	400b      	ands	r3, r1
 8000274:	4313      	orrs	r3, r2
 8000276:	607b      	str	r3, [r7, #4]
    return ((input >> 16) | (input << 16));
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	2210      	movs	r2, #16
 800027c:	41d3      	rors	r3, r2
 800027e:	0018      	movs	r0, r3
 8000280:	46bd      	mov	sp, r7
 8000282:	b002      	add	sp, #8
 8000284:	bd80      	pop	{r7, pc}
 8000286:	46c0      	nop			; (mov r8, r8)
 8000288:	55555555 	.word	0x55555555
 800028c:	aaaaaaaa 	.word	0xaaaaaaaa
 8000290:	33333333 	.word	0x33333333
 8000294:	cccccccc 	.word	0xcccccccc
 8000298:	0f0f0f0f 	.word	0x0f0f0f0f
 800029c:	f0f0f0f0 	.word	0xf0f0f0f0
 80002a0:	00ff00ff 	.word	0x00ff00ff
 80002a4:	ff00ff00 	.word	0xff00ff00

080002a8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80002a8:	b590      	push	{r4, r7, lr}
 80002aa:	b089      	sub	sp, #36	; 0x24
 80002ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ae:	240c      	movs	r4, #12
 80002b0:	193b      	adds	r3, r7, r4
 80002b2:	0018      	movs	r0, r3
 80002b4:	2314      	movs	r3, #20
 80002b6:	001a      	movs	r2, r3
 80002b8:	2100      	movs	r1, #0
 80002ba:	f002 fff5 	bl	80032a8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002be:	4b4f      	ldr	r3, [pc, #316]	; (80003fc <MX_GPIO_Init+0x154>)
 80002c0:	695a      	ldr	r2, [r3, #20]
 80002c2:	4b4e      	ldr	r3, [pc, #312]	; (80003fc <MX_GPIO_Init+0x154>)
 80002c4:	2180      	movs	r1, #128	; 0x80
 80002c6:	03c9      	lsls	r1, r1, #15
 80002c8:	430a      	orrs	r2, r1
 80002ca:	615a      	str	r2, [r3, #20]
 80002cc:	4b4b      	ldr	r3, [pc, #300]	; (80003fc <MX_GPIO_Init+0x154>)
 80002ce:	695a      	ldr	r2, [r3, #20]
 80002d0:	2380      	movs	r3, #128	; 0x80
 80002d2:	03db      	lsls	r3, r3, #15
 80002d4:	4013      	ands	r3, r2
 80002d6:	60bb      	str	r3, [r7, #8]
 80002d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002da:	4b48      	ldr	r3, [pc, #288]	; (80003fc <MX_GPIO_Init+0x154>)
 80002dc:	695a      	ldr	r2, [r3, #20]
 80002de:	4b47      	ldr	r3, [pc, #284]	; (80003fc <MX_GPIO_Init+0x154>)
 80002e0:	2180      	movs	r1, #128	; 0x80
 80002e2:	0289      	lsls	r1, r1, #10
 80002e4:	430a      	orrs	r2, r1
 80002e6:	615a      	str	r2, [r3, #20]
 80002e8:	4b44      	ldr	r3, [pc, #272]	; (80003fc <MX_GPIO_Init+0x154>)
 80002ea:	695a      	ldr	r2, [r3, #20]
 80002ec:	2380      	movs	r3, #128	; 0x80
 80002ee:	029b      	lsls	r3, r3, #10
 80002f0:	4013      	ands	r3, r2
 80002f2:	607b      	str	r3, [r7, #4]
 80002f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002f6:	4b41      	ldr	r3, [pc, #260]	; (80003fc <MX_GPIO_Init+0x154>)
 80002f8:	695a      	ldr	r2, [r3, #20]
 80002fa:	4b40      	ldr	r3, [pc, #256]	; (80003fc <MX_GPIO_Init+0x154>)
 80002fc:	2180      	movs	r1, #128	; 0x80
 80002fe:	02c9      	lsls	r1, r1, #11
 8000300:	430a      	orrs	r2, r1
 8000302:	615a      	str	r2, [r3, #20]
 8000304:	4b3d      	ldr	r3, [pc, #244]	; (80003fc <MX_GPIO_Init+0x154>)
 8000306:	695a      	ldr	r2, [r3, #20]
 8000308:	2380      	movs	r3, #128	; 0x80
 800030a:	02db      	lsls	r3, r3, #11
 800030c:	4013      	ands	r3, r2
 800030e:	603b      	str	r3, [r7, #0]
 8000310:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_OUT1_GPIO_Port, RF_OUT1_Pin, GPIO_PIN_RESET);
 8000312:	4b3b      	ldr	r3, [pc, #236]	; (8000400 <MX_GPIO_Init+0x158>)
 8000314:	2200      	movs	r2, #0
 8000316:	2101      	movs	r1, #1
 8000318:	0018      	movs	r0, r3
 800031a:	f000 fe73 	bl	8001004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PLO_LE_Pin|PLO_DATA_Pin|PLO_CLK_Pin|INT_EXT_REF_Pin
 800031e:	2390      	movs	r3, #144	; 0x90
 8000320:	05db      	lsls	r3, r3, #23
 8000322:	2200      	movs	r2, #0
 8000324:	213d      	movs	r1, #61	; 0x3d
 8000326:	0018      	movs	r0, r3
 8000328:	f000 fe6c 	bl	8001004 <HAL_GPIO_WritePin>
                          |RF_OUT2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RF_OUT1_Pin;
 800032c:	193b      	adds	r3, r7, r4
 800032e:	2201      	movs	r2, #1
 8000330:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000332:	193b      	adds	r3, r7, r4
 8000334:	2201      	movs	r2, #1
 8000336:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000338:	193b      	adds	r3, r7, r4
 800033a:	2200      	movs	r2, #0
 800033c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800033e:	193b      	adds	r3, r7, r4
 8000340:	2200      	movs	r2, #0
 8000342:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RF_OUT1_GPIO_Port, &GPIO_InitStruct);
 8000344:	193b      	adds	r3, r7, r4
 8000346:	4a2e      	ldr	r2, [pc, #184]	; (8000400 <MX_GPIO_Init+0x158>)
 8000348:	0019      	movs	r1, r3
 800034a:	0010      	movs	r0, r2
 800034c:	f000 fcea 	bl	8000d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000350:	193b      	adds	r3, r7, r4
 8000352:	2202      	movs	r2, #2
 8000354:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000356:	193b      	adds	r3, r7, r4
 8000358:	2203      	movs	r2, #3
 800035a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035c:	193b      	adds	r3, r7, r4
 800035e:	2200      	movs	r2, #0
 8000360:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000362:	193b      	adds	r3, r7, r4
 8000364:	4a26      	ldr	r2, [pc, #152]	; (8000400 <MX_GPIO_Init+0x158>)
 8000366:	0019      	movs	r1, r3
 8000368:	0010      	movs	r0, r2
 800036a:	f000 fcdb 	bl	8000d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = PLO_LE_Pin|PLO_DATA_Pin|PLO_CLK_Pin|INT_EXT_REF_Pin
 800036e:	193b      	adds	r3, r7, r4
 8000370:	223d      	movs	r2, #61	; 0x3d
 8000372:	601a      	str	r2, [r3, #0]
                          |RF_OUT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000374:	193b      	adds	r3, r7, r4
 8000376:	2201      	movs	r2, #1
 8000378:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037a:	193b      	adds	r3, r7, r4
 800037c:	2200      	movs	r2, #0
 800037e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000380:	193b      	adds	r3, r7, r4
 8000382:	2200      	movs	r2, #0
 8000384:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000386:	193a      	adds	r2, r7, r4
 8000388:	2390      	movs	r3, #144	; 0x90
 800038a:	05db      	lsls	r3, r3, #23
 800038c:	0011      	movs	r1, r2
 800038e:	0018      	movs	r0, r3
 8000390:	f000 fcc8 	bl	8000d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000394:	193b      	adds	r3, r7, r4
 8000396:	2202      	movs	r2, #2
 8000398:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800039a:	193b      	adds	r3, r7, r4
 800039c:	2203      	movs	r2, #3
 800039e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a0:	193b      	adds	r3, r7, r4
 80003a2:	2200      	movs	r2, #0
 80003a4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003a6:	193a      	adds	r2, r7, r4
 80003a8:	2390      	movs	r3, #144	; 0x90
 80003aa:	05db      	lsls	r3, r3, #23
 80003ac:	0011      	movs	r1, r2
 80003ae:	0018      	movs	r0, r3
 80003b0:	f000 fcb8 	bl	8000d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = JP1_Pin|JP2_Pin;
 80003b4:	193b      	adds	r3, r7, r4
 80003b6:	22c0      	movs	r2, #192	; 0xc0
 80003b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003ba:	193b      	adds	r3, r7, r4
 80003bc:	4a11      	ldr	r2, [pc, #68]	; (8000404 <MX_GPIO_Init+0x15c>)
 80003be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c0:	193b      	adds	r3, r7, r4
 80003c2:	2200      	movs	r2, #0
 80003c4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003c6:	193a      	adds	r2, r7, r4
 80003c8:	2390      	movs	r3, #144	; 0x90
 80003ca:	05db      	lsls	r3, r3, #23
 80003cc:	0011      	movs	r1, r2
 80003ce:	0018      	movs	r0, r3
 80003d0:	f000 fca8 	bl	8000d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PLO_MUXOUT_Pin;
 80003d4:	193b      	adds	r3, r7, r4
 80003d6:	2202      	movs	r2, #2
 80003d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003da:	193b      	adds	r3, r7, r4
 80003dc:	4a09      	ldr	r2, [pc, #36]	; (8000404 <MX_GPIO_Init+0x15c>)
 80003de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e0:	193b      	adds	r3, r7, r4
 80003e2:	2200      	movs	r2, #0
 80003e4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(PLO_MUXOUT_GPIO_Port, &GPIO_InitStruct);
 80003e6:	193b      	adds	r3, r7, r4
 80003e8:	4a07      	ldr	r2, [pc, #28]	; (8000408 <MX_GPIO_Init+0x160>)
 80003ea:	0019      	movs	r1, r3
 80003ec:	0010      	movs	r0, r2
 80003ee:	f000 fc99 	bl	8000d24 <HAL_GPIO_Init>

}
 80003f2:	46c0      	nop			; (mov r8, r8)
 80003f4:	46bd      	mov	sp, r7
 80003f6:	b009      	add	sp, #36	; 0x24
 80003f8:	bd90      	pop	{r4, r7, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	40021000 	.word	0x40021000
 8000400:	48001400 	.word	0x48001400
 8000404:	10110000 	.word	0x10110000
 8000408:	48000400 	.word	0x48000400

0800040c <HAL_UART_TxCpltCallback>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a08      	ldr	r2, [pc, #32]	; (800043c <HAL_UART_TxCpltCallback+0x30>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d105      	bne.n	800042a <HAL_UART_TxCpltCallback+0x1e>
		HAL_GPIO_TogglePin(GPIOA, INT_EXT_REF_Pin);
 800041e:	2390      	movs	r3, #144	; 0x90
 8000420:	05db      	lsls	r3, r3, #23
 8000422:	2110      	movs	r1, #16
 8000424:	0018      	movs	r0, r3
 8000426:	f000 fe0a 	bl	800103e <HAL_GPIO_TogglePin>
	plo_write_register(reg);
 800042a:	4b05      	ldr	r3, [pc, #20]	; (8000440 <HAL_UART_TxCpltCallback+0x34>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	0018      	movs	r0, r3
 8000430:	f000 f8d8 	bl	80005e4 <plo_write_register>
	//	SEND Value to SPI
}
 8000434:	46c0      	nop			; (mov r8, r8)
 8000436:	46bd      	mov	sp, r7
 8000438:	b002      	add	sp, #8
 800043a:	bd80      	pop	{r7, pc}
 800043c:	40013800 	.word	0x40013800
 8000440:	20000094 	.word	0x20000094

08000444 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a1e      	ldr	r2, [pc, #120]	; (80004cc <HAL_UART_RxCpltCallback+0x88>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d136      	bne.n	80004c4 <HAL_UART_RxCpltCallback+0x80>
		/* Transmit one byte with 100 ms timeout */
		//HAL_UART_Transmit_IT(&huart1, &byte, SIZE);
		if (s) {
 8000456:	4b1e      	ldr	r3, [pc, #120]	; (80004d0 <HAL_UART_RxCpltCallback+0x8c>)
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	2b00      	cmp	r3, #0
 800045c:	d022      	beq.n	80004a4 <HAL_UART_RxCpltCallback+0x60>
			value[u++] = (char) byte;
 800045e:	4b1d      	ldr	r3, [pc, #116]	; (80004d4 <HAL_UART_RxCpltCallback+0x90>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	1c59      	adds	r1, r3, #1
 8000464:	4a1b      	ldr	r2, [pc, #108]	; (80004d4 <HAL_UART_RxCpltCallback+0x90>)
 8000466:	6011      	str	r1, [r2, #0]
 8000468:	4a1b      	ldr	r2, [pc, #108]	; (80004d8 <HAL_UART_RxCpltCallback+0x94>)
 800046a:	7811      	ldrb	r1, [r2, #0]
 800046c:	4a1b      	ldr	r2, [pc, #108]	; (80004dc <HAL_UART_RxCpltCallback+0x98>)
 800046e:	54d1      	strb	r1, [r2, r3]
			if (u == 10) {
 8000470:	4b18      	ldr	r3, [pc, #96]	; (80004d4 <HAL_UART_RxCpltCallback+0x90>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	2b0a      	cmp	r3, #10
 8000476:	d115      	bne.n	80004a4 <HAL_UART_RxCpltCallback+0x60>
				s = 0;  					 // Reset Start State
 8000478:	4b15      	ldr	r3, [pc, #84]	; (80004d0 <HAL_UART_RxCpltCallback+0x8c>)
 800047a:	2200      	movs	r2, #0
 800047c:	701a      	strb	r2, [r3, #0]
				value[u] = '\0'; // NULL termination for Converting Char to String
 800047e:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <HAL_UART_RxCpltCallback+0x90>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	4a16      	ldr	r2, [pc, #88]	; (80004dc <HAL_UART_RxCpltCallback+0x98>)
 8000484:	2100      	movs	r1, #0
 8000486:	54d1      	strb	r1, [r2, r3]
				reg = atoi(value);			 // String to uint32_t data
 8000488:	4b14      	ldr	r3, [pc, #80]	; (80004dc <HAL_UART_RxCpltCallback+0x98>)
 800048a:	0018      	movs	r0, r3
 800048c:	f002 fedc 	bl	8003248 <atoi>
 8000490:	0003      	movs	r3, r0
 8000492:	001a      	movs	r2, r3
 8000494:	4b12      	ldr	r3, [pc, #72]	; (80004e0 <HAL_UART_RxCpltCallback+0x9c>)
 8000496:	601a      	str	r2, [r3, #0]
				//if(reg == refreg) 		 // FOR verifying received data sequence
				HAL_UART_Transmit_IT(&huart1, (uint8_t*) value, 11);
 8000498:	4910      	ldr	r1, [pc, #64]	; (80004dc <HAL_UART_RxCpltCallback+0x98>)
 800049a:	4b12      	ldr	r3, [pc, #72]	; (80004e4 <HAL_UART_RxCpltCallback+0xa0>)
 800049c:	220b      	movs	r2, #11
 800049e:	0018      	movs	r0, r3
 80004a0:	f001 ff36 	bl	8002310 <HAL_UART_Transmit_IT>
			}
		}
		if ((char) byte == 'a') {
 80004a4:	4b0c      	ldr	r3, [pc, #48]	; (80004d8 <HAL_UART_RxCpltCallback+0x94>)
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	2b61      	cmp	r3, #97	; 0x61
 80004aa:	d105      	bne.n	80004b8 <HAL_UART_RxCpltCallback+0x74>
			s = 1;
 80004ac:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <HAL_UART_RxCpltCallback+0x8c>)
 80004ae:	2201      	movs	r2, #1
 80004b0:	701a      	strb	r2, [r3, #0]
			u = 0;
 80004b2:	4b08      	ldr	r3, [pc, #32]	; (80004d4 <HAL_UART_RxCpltCallback+0x90>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
		}

		/* Receive one byte in interrupt mode */
		HAL_UART_Receive_IT(&huart1, &byte, SIZE);
 80004b8:	4907      	ldr	r1, [pc, #28]	; (80004d8 <HAL_UART_RxCpltCallback+0x94>)
 80004ba:	4b0a      	ldr	r3, [pc, #40]	; (80004e4 <HAL_UART_RxCpltCallback+0xa0>)
 80004bc:	2201      	movs	r2, #1
 80004be:	0018      	movs	r0, r3
 80004c0:	f001 ff94 	bl	80023ec <HAL_UART_Receive_IT>
	}
}
 80004c4:	46c0      	nop			; (mov r8, r8)
 80004c6:	46bd      	mov	sp, r7
 80004c8:	b002      	add	sp, #8
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	40013800 	.word	0x40013800
 80004d0:	20000090 	.word	0x20000090
 80004d4:	2000008c 	.word	0x2000008c
 80004d8:	20000098 	.word	0x20000098
 80004dc:	2000009c 	.word	0x2000009c
 80004e0:	20000094 	.word	0x20000094
 80004e4:	200000f0 	.word	0x200000f0

080004e8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004ec:	f000 fa5a 	bl	80009a4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004f0:	f000 f812 	bl	8000518 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004f4:	f7ff fed8 	bl	80002a8 <MX_GPIO_Init>
	MX_TIM3_Init();
 80004f8:	f000 f926 	bl	8000748 <MX_TIM3_Init>
	MX_USART1_UART_Init();
 80004fc:	f000 f9a0 	bl	8000840 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	HAL_UART_Receive_IT(&huart1, &byte, SIZE);
 8000500:	4903      	ldr	r1, [pc, #12]	; (8000510 <main+0x28>)
 8000502:	4b04      	ldr	r3, [pc, #16]	; (8000514 <main+0x2c>)
 8000504:	2201      	movs	r2, #1
 8000506:	0018      	movs	r0, r3
 8000508:	f001 ff70 	bl	80023ec <HAL_UART_Receive_IT>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800050c:	e7fe      	b.n	800050c <main+0x24>
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	20000098 	.word	0x20000098
 8000514:	200000f0 	.word	0x200000f0

08000518 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000518:	b590      	push	{r4, r7, lr}
 800051a:	b095      	sub	sp, #84	; 0x54
 800051c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800051e:	2420      	movs	r4, #32
 8000520:	193b      	adds	r3, r7, r4
 8000522:	0018      	movs	r0, r3
 8000524:	2330      	movs	r3, #48	; 0x30
 8000526:	001a      	movs	r2, r3
 8000528:	2100      	movs	r1, #0
 800052a:	f002 febd 	bl	80032a8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800052e:	2310      	movs	r3, #16
 8000530:	18fb      	adds	r3, r7, r3
 8000532:	0018      	movs	r0, r3
 8000534:	2310      	movs	r3, #16
 8000536:	001a      	movs	r2, r3
 8000538:	2100      	movs	r1, #0
 800053a:	f002 feb5 	bl	80032a8 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800053e:	003b      	movs	r3, r7
 8000540:	0018      	movs	r0, r3
 8000542:	2310      	movs	r3, #16
 8000544:	001a      	movs	r2, r3
 8000546:	2100      	movs	r1, #0
 8000548:	f002 feae 	bl	80032a8 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800054c:	0021      	movs	r1, r4
 800054e:	187b      	adds	r3, r7, r1
 8000550:	2202      	movs	r2, #2
 8000552:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000554:	187b      	adds	r3, r7, r1
 8000556:	2201      	movs	r2, #1
 8000558:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800055a:	187b      	adds	r3, r7, r1
 800055c:	2210      	movs	r2, #16
 800055e:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000560:	187b      	adds	r3, r7, r1
 8000562:	2202      	movs	r2, #2
 8000564:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000566:	187b      	adds	r3, r7, r1
 8000568:	2200      	movs	r2, #0
 800056a:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800056c:	187b      	adds	r3, r7, r1
 800056e:	22a0      	movs	r2, #160	; 0xa0
 8000570:	0392      	lsls	r2, r2, #14
 8000572:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000574:	187b      	adds	r3, r7, r1
 8000576:	2200      	movs	r2, #0
 8000578:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800057a:	187b      	adds	r3, r7, r1
 800057c:	0018      	movs	r0, r3
 800057e:	f000 fd79 	bl	8001074 <HAL_RCC_OscConfig>
 8000582:	1e03      	subs	r3, r0, #0
 8000584:	d001      	beq.n	800058a <SystemClock_Config+0x72>
		Error_Handler();
 8000586:	f000 f828 	bl	80005da <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800058a:	2110      	movs	r1, #16
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2207      	movs	r2, #7
 8000590:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2202      	movs	r2, #2
 8000596:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000598:	187b      	adds	r3, r7, r1
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	2200      	movs	r2, #0
 80005a2:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	2101      	movs	r1, #1
 80005a8:	0018      	movs	r0, r3
 80005aa:	f001 f87d 	bl	80016a8 <HAL_RCC_ClockConfig>
 80005ae:	1e03      	subs	r3, r0, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0x9e>
		Error_Handler();
 80005b2:	f000 f812 	bl	80005da <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80005b6:	003b      	movs	r3, r7
 80005b8:	2201      	movs	r2, #1
 80005ba:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80005bc:	003b      	movs	r3, r7
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80005c2:	003b      	movs	r3, r7
 80005c4:	0018      	movs	r0, r3
 80005c6:	f001 f9c1 	bl	800194c <HAL_RCCEx_PeriphCLKConfig>
 80005ca:	1e03      	subs	r3, r0, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0xba>
		Error_Handler();
 80005ce:	f000 f804 	bl	80005da <Error_Handler>
	}
}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	46bd      	mov	sp, r7
 80005d6:	b015      	add	sp, #84	; 0x54
 80005d8:	bd90      	pop	{r4, r7, pc}

080005da <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80005da:	b580      	push	{r7, lr}
 80005dc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005de:	b672      	cpsid	i
}
 80005e0:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80005e2:	e7fe      	b.n	80005e2 <Error_Handler+0x8>

080005e4 <plo_write_register>:
  *         The function is used for software emulation of the SPI interface 
  * 
  * @param data Input 32-bit unsigned integer number to write
  */
void plo_write_register(uint32_t data)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
    // first reverse bits input number LSB->MSB
    data = lsb_to_msb_bit_reversal(data);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	0018      	movs	r0, r3
 80005f0:	f7ff fe16 	bl	8000220 <lsb_to_msb_bit_reversal>
 80005f4:	0003      	movs	r3, r0
 80005f6:	607b      	str	r3, [r7, #4]
    // In the cycle, it passes through the individual bits of the input number
    // and sets the data output pin accordingly. 
    // It generates a clock pulse in each cycle.
    for (uint8_t j = 0; j < 32; j++)
 80005f8:	230f      	movs	r3, #15
 80005fa:	18fb      	adds	r3, r7, r3
 80005fc:	2200      	movs	r2, #0
 80005fe:	701a      	strb	r2, [r3, #0]
 8000600:	e029      	b.n	8000656 <plo_write_register+0x72>
    {
        (data & 0x01) ? PLO_DATA_SET : PLO_DATA_RESET;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2201      	movs	r2, #1
 8000606:	4013      	ands	r3, r2
 8000608:	d007      	beq.n	800061a <plo_write_register+0x36>
 800060a:	2390      	movs	r3, #144	; 0x90
 800060c:	05db      	lsls	r3, r3, #23
 800060e:	2201      	movs	r2, #1
 8000610:	2104      	movs	r1, #4
 8000612:	0018      	movs	r0, r3
 8000614:	f000 fcf6 	bl	8001004 <HAL_GPIO_WritePin>
 8000618:	e006      	b.n	8000628 <plo_write_register+0x44>
 800061a:	2390      	movs	r3, #144	; 0x90
 800061c:	05db      	lsls	r3, r3, #23
 800061e:	2200      	movs	r2, #0
 8000620:	2104      	movs	r1, #4
 8000622:	0018      	movs	r0, r3
 8000624:	f000 fcee 	bl	8001004 <HAL_GPIO_WritePin>

        // generate clock pulse and shift next
        PLO_CLK_SET;
 8000628:	2390      	movs	r3, #144	; 0x90
 800062a:	05db      	lsls	r3, r3, #23
 800062c:	2201      	movs	r2, #1
 800062e:	2108      	movs	r1, #8
 8000630:	0018      	movs	r0, r3
 8000632:	f000 fce7 	bl	8001004 <HAL_GPIO_WritePin>
        data >>= 1;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	085b      	lsrs	r3, r3, #1
 800063a:	607b      	str	r3, [r7, #4]
        PLO_CLK_RESET;
 800063c:	2390      	movs	r3, #144	; 0x90
 800063e:	05db      	lsls	r3, r3, #23
 8000640:	2200      	movs	r2, #0
 8000642:	2108      	movs	r1, #8
 8000644:	0018      	movs	r0, r3
 8000646:	f000 fcdd 	bl	8001004 <HAL_GPIO_WritePin>
    for (uint8_t j = 0; j < 32; j++)
 800064a:	210f      	movs	r1, #15
 800064c:	187b      	adds	r3, r7, r1
 800064e:	781a      	ldrb	r2, [r3, #0]
 8000650:	187b      	adds	r3, r7, r1
 8000652:	3201      	adds	r2, #1
 8000654:	701a      	strb	r2, [r3, #0]
 8000656:	230f      	movs	r3, #15
 8000658:	18fb      	adds	r3, r7, r3
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b1f      	cmp	r3, #31
 800065e:	d9d0      	bls.n	8000602 <plo_write_register+0x1e>
    }
    // generate update pulse
    PLO_LE_SET;
 8000660:	2390      	movs	r3, #144	; 0x90
 8000662:	05db      	lsls	r3, r3, #23
 8000664:	2201      	movs	r2, #1
 8000666:	2101      	movs	r1, #1
 8000668:	0018      	movs	r0, r3
 800066a:	f000 fccb 	bl	8001004 <HAL_GPIO_WritePin>
    PLO_LE_RESET;
 800066e:	2390      	movs	r3, #144	; 0x90
 8000670:	05db      	lsls	r3, r3, #23
 8000672:	2200      	movs	r2, #0
 8000674:	2101      	movs	r1, #1
 8000676:	0018      	movs	r0, r3
 8000678:	f000 fcc4 	bl	8001004 <HAL_GPIO_WritePin>
    // get down data wire
    PLO_DATA_RESET;
 800067c:	2390      	movs	r3, #144	; 0x90
 800067e:	05db      	lsls	r3, r3, #23
 8000680:	2200      	movs	r2, #0
 8000682:	2104      	movs	r1, #4
 8000684:	0018      	movs	r0, r3
 8000686:	f000 fcbd 	bl	8001004 <HAL_GPIO_WritePin>
}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	46bd      	mov	sp, r7
 800068e:	b004      	add	sp, #16
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800069a:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <HAL_MspInit+0x44>)
 800069c:	699a      	ldr	r2, [r3, #24]
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <HAL_MspInit+0x44>)
 80006a0:	2101      	movs	r1, #1
 80006a2:	430a      	orrs	r2, r1
 80006a4:	619a      	str	r2, [r3, #24]
 80006a6:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <HAL_MspInit+0x44>)
 80006a8:	699b      	ldr	r3, [r3, #24]
 80006aa:	2201      	movs	r2, #1
 80006ac:	4013      	ands	r3, r2
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <HAL_MspInit+0x44>)
 80006b4:	69da      	ldr	r2, [r3, #28]
 80006b6:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <HAL_MspInit+0x44>)
 80006b8:	2180      	movs	r1, #128	; 0x80
 80006ba:	0549      	lsls	r1, r1, #21
 80006bc:	430a      	orrs	r2, r1
 80006be:	61da      	str	r2, [r3, #28]
 80006c0:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <HAL_MspInit+0x44>)
 80006c2:	69da      	ldr	r2, [r3, #28]
 80006c4:	2380      	movs	r3, #128	; 0x80
 80006c6:	055b      	lsls	r3, r3, #21
 80006c8:	4013      	ands	r3, r2
 80006ca:	603b      	str	r3, [r7, #0]
 80006cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	46bd      	mov	sp, r7
 80006d2:	b002      	add	sp, #8
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	40021000 	.word	0x40021000

080006dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <NMI_Handler+0x4>

080006e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e2:	b580      	push	{r7, lr}
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006e6:	e7fe      	b.n	80006e6 <HardFault_Handler+0x4>

080006e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006ec:	46c0      	nop			; (mov r8, r8)
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006f6:	46c0      	nop			; (mov r8, r8)
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000700:	f000 f998 	bl	8000a34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000704:	46c0      	nop			; (mov r8, r8)
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
	...

0800070c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000710:	4b03      	ldr	r3, [pc, #12]	; (8000720 <TIM3_IRQHandler+0x14>)
 8000712:	0018      	movs	r0, r3
 8000714:	f001 fa38 	bl	8001b88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000718:	46c0      	nop			; (mov r8, r8)
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	200000a8 	.word	0x200000a8

08000724 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000728:	4b03      	ldr	r3, [pc, #12]	; (8000738 <USART1_IRQHandler+0x14>)
 800072a:	0018      	movs	r0, r3
 800072c:	f001 feae 	bl	800248c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000730:	46c0      	nop			; (mov r8, r8)
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	200000f0 	.word	0x200000f0

0800073c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000740:	46c0      	nop			; (mov r8, r8)
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
	...

08000748 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800074e:	2308      	movs	r3, #8
 8000750:	18fb      	adds	r3, r7, r3
 8000752:	0018      	movs	r0, r3
 8000754:	2310      	movs	r3, #16
 8000756:	001a      	movs	r2, r3
 8000758:	2100      	movs	r1, #0
 800075a:	f002 fda5 	bl	80032a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800075e:	003b      	movs	r3, r7
 8000760:	0018      	movs	r0, r3
 8000762:	2308      	movs	r3, #8
 8000764:	001a      	movs	r2, r3
 8000766:	2100      	movs	r1, #0
 8000768:	f002 fd9e 	bl	80032a8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800076c:	4b1e      	ldr	r3, [pc, #120]	; (80007e8 <MX_TIM3_Init+0xa0>)
 800076e:	4a1f      	ldr	r2, [pc, #124]	; (80007ec <MX_TIM3_Init+0xa4>)
 8000770:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48000;
 8000772:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <MX_TIM3_Init+0xa0>)
 8000774:	4a1e      	ldr	r2, [pc, #120]	; (80007f0 <MX_TIM3_Init+0xa8>)
 8000776:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000778:	4b1b      	ldr	r3, [pc, #108]	; (80007e8 <MX_TIM3_Init+0xa0>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 800077e:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <MX_TIM3_Init+0xa0>)
 8000780:	22f4      	movs	r2, #244	; 0xf4
 8000782:	32ff      	adds	r2, #255	; 0xff
 8000784:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000786:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <MX_TIM3_Init+0xa0>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800078c:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <MX_TIM3_Init+0xa0>)
 800078e:	2200      	movs	r2, #0
 8000790:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000792:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <MX_TIM3_Init+0xa0>)
 8000794:	0018      	movs	r0, r3
 8000796:	f001 f9a7 	bl	8001ae8 <HAL_TIM_Base_Init>
 800079a:	1e03      	subs	r3, r0, #0
 800079c:	d001      	beq.n	80007a2 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800079e:	f7ff ff1c 	bl	80005da <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007a2:	2108      	movs	r1, #8
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	2280      	movs	r2, #128	; 0x80
 80007a8:	0152      	lsls	r2, r2, #5
 80007aa:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007ac:	187a      	adds	r2, r7, r1
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_TIM3_Init+0xa0>)
 80007b0:	0011      	movs	r1, r2
 80007b2:	0018      	movs	r0, r3
 80007b4:	f001 fafe 	bl	8001db4 <HAL_TIM_ConfigClockSource>
 80007b8:	1e03      	subs	r3, r0, #0
 80007ba:	d001      	beq.n	80007c0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80007bc:	f7ff ff0d 	bl	80005da <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c0:	003b      	movs	r3, r7
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c6:	003b      	movs	r3, r7
 80007c8:	2200      	movs	r2, #0
 80007ca:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007cc:	003a      	movs	r2, r7
 80007ce:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <MX_TIM3_Init+0xa0>)
 80007d0:	0011      	movs	r1, r2
 80007d2:	0018      	movs	r0, r3
 80007d4:	f001 fce6 	bl	80021a4 <HAL_TIMEx_MasterConfigSynchronization>
 80007d8:	1e03      	subs	r3, r0, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80007dc:	f7ff fefd 	bl	80005da <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80007e0:	46c0      	nop			; (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	b006      	add	sp, #24
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	200000a8 	.word	0x200000a8
 80007ec:	40000400 	.word	0x40000400
 80007f0:	0000bb80 	.word	0x0000bb80

080007f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a0d      	ldr	r2, [pc, #52]	; (8000838 <HAL_TIM_Base_MspInit+0x44>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d113      	bne.n	800082e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000806:	4b0d      	ldr	r3, [pc, #52]	; (800083c <HAL_TIM_Base_MspInit+0x48>)
 8000808:	69da      	ldr	r2, [r3, #28]
 800080a:	4b0c      	ldr	r3, [pc, #48]	; (800083c <HAL_TIM_Base_MspInit+0x48>)
 800080c:	2102      	movs	r1, #2
 800080e:	430a      	orrs	r2, r1
 8000810:	61da      	str	r2, [r3, #28]
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <HAL_TIM_Base_MspInit+0x48>)
 8000814:	69db      	ldr	r3, [r3, #28]
 8000816:	2202      	movs	r2, #2
 8000818:	4013      	ands	r3, r2
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	2100      	movs	r1, #0
 8000822:	2010      	movs	r0, #16
 8000824:	f000 f9ce 	bl	8000bc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000828:	2010      	movs	r0, #16
 800082a:	f000 f9e0 	bl	8000bee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	46bd      	mov	sp, r7
 8000832:	b004      	add	sp, #16
 8000834:	bd80      	pop	{r7, pc}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	40000400 	.word	0x40000400
 800083c:	40021000 	.word	0x40021000

08000840 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000844:	4b15      	ldr	r3, [pc, #84]	; (800089c <MX_USART1_UART_Init+0x5c>)
 8000846:	4a16      	ldr	r2, [pc, #88]	; (80008a0 <MX_USART1_UART_Init+0x60>)
 8000848:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800084a:	4b14      	ldr	r3, [pc, #80]	; (800089c <MX_USART1_UART_Init+0x5c>)
 800084c:	22e1      	movs	r2, #225	; 0xe1
 800084e:	0252      	lsls	r2, r2, #9
 8000850:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000852:	4b12      	ldr	r3, [pc, #72]	; (800089c <MX_USART1_UART_Init+0x5c>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000858:	4b10      	ldr	r3, [pc, #64]	; (800089c <MX_USART1_UART_Init+0x5c>)
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800085e:	4b0f      	ldr	r3, [pc, #60]	; (800089c <MX_USART1_UART_Init+0x5c>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000864:	4b0d      	ldr	r3, [pc, #52]	; (800089c <MX_USART1_UART_Init+0x5c>)
 8000866:	220c      	movs	r2, #12
 8000868:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086a:	4b0c      	ldr	r3, [pc, #48]	; (800089c <MX_USART1_UART_Init+0x5c>)
 800086c:	2200      	movs	r2, #0
 800086e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8000870:	4b0a      	ldr	r3, [pc, #40]	; (800089c <MX_USART1_UART_Init+0x5c>)
 8000872:	2280      	movs	r2, #128	; 0x80
 8000874:	0212      	lsls	r2, r2, #8
 8000876:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000878:	4b08      	ldr	r3, [pc, #32]	; (800089c <MX_USART1_UART_Init+0x5c>)
 800087a:	2200      	movs	r2, #0
 800087c:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800087e:	4b07      	ldr	r3, [pc, #28]	; (800089c <MX_USART1_UART_Init+0x5c>)
 8000880:	2200      	movs	r2, #0
 8000882:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000884:	4b05      	ldr	r3, [pc, #20]	; (800089c <MX_USART1_UART_Init+0x5c>)
 8000886:	0018      	movs	r0, r3
 8000888:	f001 fcee 	bl	8002268 <HAL_UART_Init>
 800088c:	1e03      	subs	r3, r0, #0
 800088e:	d001      	beq.n	8000894 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8000890:	f7ff fea3 	bl	80005da <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000894:	46c0      	nop			; (mov r8, r8)
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	200000f0 	.word	0x200000f0
 80008a0:	40013800 	.word	0x40013800

080008a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b08b      	sub	sp, #44	; 0x2c
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ac:	2414      	movs	r4, #20
 80008ae:	193b      	adds	r3, r7, r4
 80008b0:	0018      	movs	r0, r3
 80008b2:	2314      	movs	r3, #20
 80008b4:	001a      	movs	r2, r3
 80008b6:	2100      	movs	r1, #0
 80008b8:	f002 fcf6 	bl	80032a8 <memset>
  if(uartHandle->Instance==USART1)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a21      	ldr	r2, [pc, #132]	; (8000948 <HAL_UART_MspInit+0xa4>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d13b      	bne.n	800093e <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008c6:	4b21      	ldr	r3, [pc, #132]	; (800094c <HAL_UART_MspInit+0xa8>)
 80008c8:	699a      	ldr	r2, [r3, #24]
 80008ca:	4b20      	ldr	r3, [pc, #128]	; (800094c <HAL_UART_MspInit+0xa8>)
 80008cc:	2180      	movs	r1, #128	; 0x80
 80008ce:	01c9      	lsls	r1, r1, #7
 80008d0:	430a      	orrs	r2, r1
 80008d2:	619a      	str	r2, [r3, #24]
 80008d4:	4b1d      	ldr	r3, [pc, #116]	; (800094c <HAL_UART_MspInit+0xa8>)
 80008d6:	699a      	ldr	r2, [r3, #24]
 80008d8:	2380      	movs	r3, #128	; 0x80
 80008da:	01db      	lsls	r3, r3, #7
 80008dc:	4013      	ands	r3, r2
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	4b1a      	ldr	r3, [pc, #104]	; (800094c <HAL_UART_MspInit+0xa8>)
 80008e4:	695a      	ldr	r2, [r3, #20]
 80008e6:	4b19      	ldr	r3, [pc, #100]	; (800094c <HAL_UART_MspInit+0xa8>)
 80008e8:	2180      	movs	r1, #128	; 0x80
 80008ea:	0289      	lsls	r1, r1, #10
 80008ec:	430a      	orrs	r2, r1
 80008ee:	615a      	str	r2, [r3, #20]
 80008f0:	4b16      	ldr	r3, [pc, #88]	; (800094c <HAL_UART_MspInit+0xa8>)
 80008f2:	695a      	ldr	r2, [r3, #20]
 80008f4:	2380      	movs	r3, #128	; 0x80
 80008f6:	029b      	lsls	r3, r3, #10
 80008f8:	4013      	ands	r3, r2
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008fe:	193b      	adds	r3, r7, r4
 8000900:	22c0      	movs	r2, #192	; 0xc0
 8000902:	00d2      	lsls	r2, r2, #3
 8000904:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	0021      	movs	r1, r4
 8000908:	187b      	adds	r3, r7, r1
 800090a:	2202      	movs	r2, #2
 800090c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	187b      	adds	r3, r7, r1
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000914:	187b      	adds	r3, r7, r1
 8000916:	2203      	movs	r2, #3
 8000918:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800091a:	187b      	adds	r3, r7, r1
 800091c:	2201      	movs	r2, #1
 800091e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000920:	187a      	adds	r2, r7, r1
 8000922:	2390      	movs	r3, #144	; 0x90
 8000924:	05db      	lsls	r3, r3, #23
 8000926:	0011      	movs	r1, r2
 8000928:	0018      	movs	r0, r3
 800092a:	f000 f9fb 	bl	8000d24 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	2100      	movs	r1, #0
 8000932:	201b      	movs	r0, #27
 8000934:	f000 f946 	bl	8000bc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000938:	201b      	movs	r0, #27
 800093a:	f000 f958 	bl	8000bee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	46bd      	mov	sp, r7
 8000942:	b00b      	add	sp, #44	; 0x2c
 8000944:	bd90      	pop	{r4, r7, pc}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	40013800 	.word	0x40013800
 800094c:	40021000 	.word	0x40021000

08000950 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000950:	480d      	ldr	r0, [pc, #52]	; (8000988 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000952:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000954:	480d      	ldr	r0, [pc, #52]	; (800098c <LoopForever+0x6>)
  ldr r1, =_edata
 8000956:	490e      	ldr	r1, [pc, #56]	; (8000990 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000958:	4a0e      	ldr	r2, [pc, #56]	; (8000994 <LoopForever+0xe>)
  movs r3, #0
 800095a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800095c:	e002      	b.n	8000964 <LoopCopyDataInit>

0800095e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000962:	3304      	adds	r3, #4

08000964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000968:	d3f9      	bcc.n	800095e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096a:	4a0b      	ldr	r2, [pc, #44]	; (8000998 <LoopForever+0x12>)
  ldr r4, =_ebss
 800096c:	4c0b      	ldr	r4, [pc, #44]	; (800099c <LoopForever+0x16>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000970:	e001      	b.n	8000976 <LoopFillZerobss>

08000972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000974:	3204      	adds	r2, #4

08000976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000978:	d3fb      	bcc.n	8000972 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800097a:	f7ff fedf 	bl	800073c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800097e:	f002 fc6f 	bl	8003260 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000982:	f7ff fdb1 	bl	80004e8 <main>

08000986 <LoopForever>:

LoopForever:
    b LoopForever
 8000986:	e7fe      	b.n	8000986 <LoopForever>
  ldr   r0, =_estack
 8000988:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 800098c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000990:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000994:	080035a8 	.word	0x080035a8
  ldr r2, =_sbss
 8000998:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800099c:	20000178 	.word	0x20000178

080009a0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009a0:	e7fe      	b.n	80009a0 <ADC1_IRQHandler>
	...

080009a4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009a8:	4b07      	ldr	r3, [pc, #28]	; (80009c8 <HAL_Init+0x24>)
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <HAL_Init+0x24>)
 80009ae:	2110      	movs	r1, #16
 80009b0:	430a      	orrs	r2, r1
 80009b2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80009b4:	2000      	movs	r0, #0
 80009b6:	f000 f809 	bl	80009cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009ba:	f7ff fe6b 	bl	8000694 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009be:	2300      	movs	r3, #0
}
 80009c0:	0018      	movs	r0, r3
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	40022000 	.word	0x40022000

080009cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009cc:	b590      	push	{r4, r7, lr}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009d4:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <HAL_InitTick+0x5c>)
 80009d6:	681c      	ldr	r4, [r3, #0]
 80009d8:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <HAL_InitTick+0x60>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	0019      	movs	r1, r3
 80009de:	23fa      	movs	r3, #250	; 0xfa
 80009e0:	0098      	lsls	r0, r3, #2
 80009e2:	f7ff fb91 	bl	8000108 <__udivsi3>
 80009e6:	0003      	movs	r3, r0
 80009e8:	0019      	movs	r1, r3
 80009ea:	0020      	movs	r0, r4
 80009ec:	f7ff fb8c 	bl	8000108 <__udivsi3>
 80009f0:	0003      	movs	r3, r0
 80009f2:	0018      	movs	r0, r3
 80009f4:	f000 f90b 	bl	8000c0e <HAL_SYSTICK_Config>
 80009f8:	1e03      	subs	r3, r0, #0
 80009fa:	d001      	beq.n	8000a00 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80009fc:	2301      	movs	r3, #1
 80009fe:	e00f      	b.n	8000a20 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2b03      	cmp	r3, #3
 8000a04:	d80b      	bhi.n	8000a1e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a06:	6879      	ldr	r1, [r7, #4]
 8000a08:	2301      	movs	r3, #1
 8000a0a:	425b      	negs	r3, r3
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f000 f8d8 	bl	8000bc4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_InitTick+0x64>)
 8000a16:	687a      	ldr	r2, [r7, #4]
 8000a18:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	e000      	b.n	8000a20 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
}
 8000a20:	0018      	movs	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	b003      	add	sp, #12
 8000a26:	bd90      	pop	{r4, r7, pc}
 8000a28:	20000000 	.word	0x20000000
 8000a2c:	20000008 	.word	0x20000008
 8000a30:	20000004 	.word	0x20000004

08000a34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a38:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <HAL_IncTick+0x1c>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	001a      	movs	r2, r3
 8000a3e:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <HAL_IncTick+0x20>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	18d2      	adds	r2, r2, r3
 8000a44:	4b03      	ldr	r3, [pc, #12]	; (8000a54 <HAL_IncTick+0x20>)
 8000a46:	601a      	str	r2, [r3, #0]
}
 8000a48:	46c0      	nop			; (mov r8, r8)
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	20000008 	.word	0x20000008
 8000a54:	20000174 	.word	0x20000174

08000a58 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a5c:	4b02      	ldr	r3, [pc, #8]	; (8000a68 <HAL_GetTick+0x10>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
}
 8000a60:	0018      	movs	r0, r3
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	20000174 	.word	0x20000174

08000a6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	0002      	movs	r2, r0
 8000a74:	1dfb      	adds	r3, r7, #7
 8000a76:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a78:	1dfb      	adds	r3, r7, #7
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b7f      	cmp	r3, #127	; 0x7f
 8000a7e:	d809      	bhi.n	8000a94 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a80:	1dfb      	adds	r3, r7, #7
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	001a      	movs	r2, r3
 8000a86:	231f      	movs	r3, #31
 8000a88:	401a      	ands	r2, r3
 8000a8a:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <__NVIC_EnableIRQ+0x30>)
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	4091      	lsls	r1, r2
 8000a90:	000a      	movs	r2, r1
 8000a92:	601a      	str	r2, [r3, #0]
  }
}
 8000a94:	46c0      	nop			; (mov r8, r8)
 8000a96:	46bd      	mov	sp, r7
 8000a98:	b002      	add	sp, #8
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	e000e100 	.word	0xe000e100

08000aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aa0:	b590      	push	{r4, r7, lr}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	0002      	movs	r2, r0
 8000aa8:	6039      	str	r1, [r7, #0]
 8000aaa:	1dfb      	adds	r3, r7, #7
 8000aac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000aae:	1dfb      	adds	r3, r7, #7
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	2b7f      	cmp	r3, #127	; 0x7f
 8000ab4:	d828      	bhi.n	8000b08 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ab6:	4a2f      	ldr	r2, [pc, #188]	; (8000b74 <__NVIC_SetPriority+0xd4>)
 8000ab8:	1dfb      	adds	r3, r7, #7
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	b25b      	sxtb	r3, r3
 8000abe:	089b      	lsrs	r3, r3, #2
 8000ac0:	33c0      	adds	r3, #192	; 0xc0
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	589b      	ldr	r3, [r3, r2]
 8000ac6:	1dfa      	adds	r2, r7, #7
 8000ac8:	7812      	ldrb	r2, [r2, #0]
 8000aca:	0011      	movs	r1, r2
 8000acc:	2203      	movs	r2, #3
 8000ace:	400a      	ands	r2, r1
 8000ad0:	00d2      	lsls	r2, r2, #3
 8000ad2:	21ff      	movs	r1, #255	; 0xff
 8000ad4:	4091      	lsls	r1, r2
 8000ad6:	000a      	movs	r2, r1
 8000ad8:	43d2      	mvns	r2, r2
 8000ada:	401a      	ands	r2, r3
 8000adc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	019b      	lsls	r3, r3, #6
 8000ae2:	22ff      	movs	r2, #255	; 0xff
 8000ae4:	401a      	ands	r2, r3
 8000ae6:	1dfb      	adds	r3, r7, #7
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	0018      	movs	r0, r3
 8000aec:	2303      	movs	r3, #3
 8000aee:	4003      	ands	r3, r0
 8000af0:	00db      	lsls	r3, r3, #3
 8000af2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000af4:	481f      	ldr	r0, [pc, #124]	; (8000b74 <__NVIC_SetPriority+0xd4>)
 8000af6:	1dfb      	adds	r3, r7, #7
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	b25b      	sxtb	r3, r3
 8000afc:	089b      	lsrs	r3, r3, #2
 8000afe:	430a      	orrs	r2, r1
 8000b00:	33c0      	adds	r3, #192	; 0xc0
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b06:	e031      	b.n	8000b6c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b08:	4a1b      	ldr	r2, [pc, #108]	; (8000b78 <__NVIC_SetPriority+0xd8>)
 8000b0a:	1dfb      	adds	r3, r7, #7
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	0019      	movs	r1, r3
 8000b10:	230f      	movs	r3, #15
 8000b12:	400b      	ands	r3, r1
 8000b14:	3b08      	subs	r3, #8
 8000b16:	089b      	lsrs	r3, r3, #2
 8000b18:	3306      	adds	r3, #6
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	18d3      	adds	r3, r2, r3
 8000b1e:	3304      	adds	r3, #4
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	1dfa      	adds	r2, r7, #7
 8000b24:	7812      	ldrb	r2, [r2, #0]
 8000b26:	0011      	movs	r1, r2
 8000b28:	2203      	movs	r2, #3
 8000b2a:	400a      	ands	r2, r1
 8000b2c:	00d2      	lsls	r2, r2, #3
 8000b2e:	21ff      	movs	r1, #255	; 0xff
 8000b30:	4091      	lsls	r1, r2
 8000b32:	000a      	movs	r2, r1
 8000b34:	43d2      	mvns	r2, r2
 8000b36:	401a      	ands	r2, r3
 8000b38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	019b      	lsls	r3, r3, #6
 8000b3e:	22ff      	movs	r2, #255	; 0xff
 8000b40:	401a      	ands	r2, r3
 8000b42:	1dfb      	adds	r3, r7, #7
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	0018      	movs	r0, r3
 8000b48:	2303      	movs	r3, #3
 8000b4a:	4003      	ands	r3, r0
 8000b4c:	00db      	lsls	r3, r3, #3
 8000b4e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b50:	4809      	ldr	r0, [pc, #36]	; (8000b78 <__NVIC_SetPriority+0xd8>)
 8000b52:	1dfb      	adds	r3, r7, #7
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	001c      	movs	r4, r3
 8000b58:	230f      	movs	r3, #15
 8000b5a:	4023      	ands	r3, r4
 8000b5c:	3b08      	subs	r3, #8
 8000b5e:	089b      	lsrs	r3, r3, #2
 8000b60:	430a      	orrs	r2, r1
 8000b62:	3306      	adds	r3, #6
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	18c3      	adds	r3, r0, r3
 8000b68:	3304      	adds	r3, #4
 8000b6a:	601a      	str	r2, [r3, #0]
}
 8000b6c:	46c0      	nop			; (mov r8, r8)
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	b003      	add	sp, #12
 8000b72:	bd90      	pop	{r4, r7, pc}
 8000b74:	e000e100 	.word	0xe000e100
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	1e5a      	subs	r2, r3, #1
 8000b88:	2380      	movs	r3, #128	; 0x80
 8000b8a:	045b      	lsls	r3, r3, #17
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d301      	bcc.n	8000b94 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b90:	2301      	movs	r3, #1
 8000b92:	e010      	b.n	8000bb6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b94:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <SysTick_Config+0x44>)
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	3a01      	subs	r2, #1
 8000b9a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	425b      	negs	r3, r3
 8000ba0:	2103      	movs	r1, #3
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f7ff ff7c 	bl	8000aa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ba8:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <SysTick_Config+0x44>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bae:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <SysTick_Config+0x44>)
 8000bb0:	2207      	movs	r2, #7
 8000bb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	b002      	add	sp, #8
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	e000e010 	.word	0xe000e010

08000bc4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60b9      	str	r1, [r7, #8]
 8000bcc:	607a      	str	r2, [r7, #4]
 8000bce:	210f      	movs	r1, #15
 8000bd0:	187b      	adds	r3, r7, r1
 8000bd2:	1c02      	adds	r2, r0, #0
 8000bd4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000bd6:	68ba      	ldr	r2, [r7, #8]
 8000bd8:	187b      	adds	r3, r7, r1
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	b25b      	sxtb	r3, r3
 8000bde:	0011      	movs	r1, r2
 8000be0:	0018      	movs	r0, r3
 8000be2:	f7ff ff5d 	bl	8000aa0 <__NVIC_SetPriority>
}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	46bd      	mov	sp, r7
 8000bea:	b004      	add	sp, #16
 8000bec:	bd80      	pop	{r7, pc}

08000bee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b082      	sub	sp, #8
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	0002      	movs	r2, r0
 8000bf6:	1dfb      	adds	r3, r7, #7
 8000bf8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bfa:	1dfb      	adds	r3, r7, #7
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	b25b      	sxtb	r3, r3
 8000c00:	0018      	movs	r0, r3
 8000c02:	f7ff ff33 	bl	8000a6c <__NVIC_EnableIRQ>
}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	b002      	add	sp, #8
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b082      	sub	sp, #8
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f7ff ffaf 	bl	8000b7c <SysTick_Config>
 8000c1e:	0003      	movs	r3, r0
}
 8000c20:	0018      	movs	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	b002      	add	sp, #8
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2221      	movs	r2, #33	; 0x21
 8000c34:	5c9b      	ldrb	r3, [r3, r2]
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	2b02      	cmp	r3, #2
 8000c3a:	d008      	beq.n	8000c4e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2204      	movs	r2, #4
 8000c40:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2220      	movs	r2, #32
 8000c46:	2100      	movs	r1, #0
 8000c48:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e020      	b.n	8000c90 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	210e      	movs	r1, #14
 8000c5a:	438a      	bics	r2, r1
 8000c5c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2101      	movs	r1, #1
 8000c6a:	438a      	bics	r2, r1
 8000c6c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c76:	2101      	movs	r1, #1
 8000c78:	4091      	lsls	r1, r2
 8000c7a:	000a      	movs	r2, r1
 8000c7c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2221      	movs	r2, #33	; 0x21
 8000c82:	2101      	movs	r1, #1
 8000c84:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2220      	movs	r2, #32
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000c8e:	2300      	movs	r3, #0
}
 8000c90:	0018      	movs	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	b002      	add	sp, #8
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ca0:	210f      	movs	r1, #15
 8000ca2:	187b      	adds	r3, r7, r1
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2221      	movs	r2, #33	; 0x21
 8000cac:	5c9b      	ldrb	r3, [r3, r2]
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	d006      	beq.n	8000cc2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2204      	movs	r2, #4
 8000cb8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000cba:	187b      	adds	r3, r7, r1
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	701a      	strb	r2, [r3, #0]
 8000cc0:	e028      	b.n	8000d14 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	210e      	movs	r1, #14
 8000cce:	438a      	bics	r2, r1
 8000cd0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2101      	movs	r1, #1
 8000cde:	438a      	bics	r2, r1
 8000ce0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cea:	2101      	movs	r1, #1
 8000cec:	4091      	lsls	r1, r2
 8000cee:	000a      	movs	r2, r1
 8000cf0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2221      	movs	r2, #33	; 0x21
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2220      	movs	r2, #32
 8000cfe:	2100      	movs	r1, #0
 8000d00:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d004      	beq.n	8000d14 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	0010      	movs	r0, r2
 8000d12:	4798      	blx	r3
    } 
  }
  return status;
 8000d14:	230f      	movs	r3, #15
 8000d16:	18fb      	adds	r3, r7, r3
 8000d18:	781b      	ldrb	r3, [r3, #0]
}
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	b004      	add	sp, #16
 8000d20:	bd80      	pop	{r7, pc}
	...

08000d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d32:	e14f      	b.n	8000fd4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2101      	movs	r1, #1
 8000d3a:	697a      	ldr	r2, [r7, #20]
 8000d3c:	4091      	lsls	r1, r2
 8000d3e:	000a      	movs	r2, r1
 8000d40:	4013      	ands	r3, r2
 8000d42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d100      	bne.n	8000d4c <HAL_GPIO_Init+0x28>
 8000d4a:	e140      	b.n	8000fce <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d00b      	beq.n	8000d6c <HAL_GPIO_Init+0x48>
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d007      	beq.n	8000d6c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d60:	2b11      	cmp	r3, #17
 8000d62:	d003      	beq.n	8000d6c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	2b12      	cmp	r3, #18
 8000d6a:	d130      	bne.n	8000dce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	2203      	movs	r2, #3
 8000d78:	409a      	lsls	r2, r3
 8000d7a:	0013      	movs	r3, r2
 8000d7c:	43da      	mvns	r2, r3
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	4013      	ands	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	68da      	ldr	r2, [r3, #12]
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	409a      	lsls	r2, r3
 8000d8e:	0013      	movs	r3, r2
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000da2:	2201      	movs	r2, #1
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	409a      	lsls	r2, r3
 8000da8:	0013      	movs	r3, r2
 8000daa:	43da      	mvns	r2, r3
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	4013      	ands	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	091b      	lsrs	r3, r3, #4
 8000db8:	2201      	movs	r2, #1
 8000dba:	401a      	ands	r2, r3
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	409a      	lsls	r2, r3
 8000dc0:	0013      	movs	r3, r2
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	68db      	ldr	r3, [r3, #12]
 8000dd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	2203      	movs	r2, #3
 8000dda:	409a      	lsls	r2, r3
 8000ddc:	0013      	movs	r3, r2
 8000dde:	43da      	mvns	r2, r3
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	4013      	ands	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	689a      	ldr	r2, [r3, #8]
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	409a      	lsls	r2, r3
 8000df0:	0013      	movs	r3, r2
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d003      	beq.n	8000e0e <HAL_GPIO_Init+0xea>
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	2b12      	cmp	r3, #18
 8000e0c:	d123      	bne.n	8000e56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	08da      	lsrs	r2, r3, #3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	3208      	adds	r2, #8
 8000e16:	0092      	lsls	r2, r2, #2
 8000e18:	58d3      	ldr	r3, [r2, r3]
 8000e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	2207      	movs	r2, #7
 8000e20:	4013      	ands	r3, r2
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	220f      	movs	r2, #15
 8000e26:	409a      	lsls	r2, r3
 8000e28:	0013      	movs	r3, r2
 8000e2a:	43da      	mvns	r2, r3
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	691a      	ldr	r2, [r3, #16]
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	2107      	movs	r1, #7
 8000e3a:	400b      	ands	r3, r1
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	409a      	lsls	r2, r3
 8000e40:	0013      	movs	r3, r2
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	08da      	lsrs	r2, r3, #3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3208      	adds	r2, #8
 8000e50:	0092      	lsls	r2, r2, #2
 8000e52:	6939      	ldr	r1, [r7, #16]
 8000e54:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	2203      	movs	r2, #3
 8000e62:	409a      	lsls	r2, r3
 8000e64:	0013      	movs	r3, r2
 8000e66:	43da      	mvns	r2, r3
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	2203      	movs	r2, #3
 8000e74:	401a      	ands	r2, r3
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	409a      	lsls	r2, r3
 8000e7c:	0013      	movs	r3, r2
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685a      	ldr	r2, [r3, #4]
 8000e8e:	2380      	movs	r3, #128	; 0x80
 8000e90:	055b      	lsls	r3, r3, #21
 8000e92:	4013      	ands	r3, r2
 8000e94:	d100      	bne.n	8000e98 <HAL_GPIO_Init+0x174>
 8000e96:	e09a      	b.n	8000fce <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e98:	4b54      	ldr	r3, [pc, #336]	; (8000fec <HAL_GPIO_Init+0x2c8>)
 8000e9a:	699a      	ldr	r2, [r3, #24]
 8000e9c:	4b53      	ldr	r3, [pc, #332]	; (8000fec <HAL_GPIO_Init+0x2c8>)
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	619a      	str	r2, [r3, #24]
 8000ea4:	4b51      	ldr	r3, [pc, #324]	; (8000fec <HAL_GPIO_Init+0x2c8>)
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	4013      	ands	r3, r2
 8000eac:	60bb      	str	r3, [r7, #8]
 8000eae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000eb0:	4a4f      	ldr	r2, [pc, #316]	; (8000ff0 <HAL_GPIO_Init+0x2cc>)
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	089b      	lsrs	r3, r3, #2
 8000eb6:	3302      	adds	r3, #2
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	589b      	ldr	r3, [r3, r2]
 8000ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	220f      	movs	r2, #15
 8000ec8:	409a      	lsls	r2, r3
 8000eca:	0013      	movs	r3, r2
 8000ecc:	43da      	mvns	r2, r3
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	2390      	movs	r3, #144	; 0x90
 8000ed8:	05db      	lsls	r3, r3, #23
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d013      	beq.n	8000f06 <HAL_GPIO_Init+0x1e2>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a44      	ldr	r2, [pc, #272]	; (8000ff4 <HAL_GPIO_Init+0x2d0>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d00d      	beq.n	8000f02 <HAL_GPIO_Init+0x1de>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a43      	ldr	r2, [pc, #268]	; (8000ff8 <HAL_GPIO_Init+0x2d4>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d007      	beq.n	8000efe <HAL_GPIO_Init+0x1da>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a42      	ldr	r2, [pc, #264]	; (8000ffc <HAL_GPIO_Init+0x2d8>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d101      	bne.n	8000efa <HAL_GPIO_Init+0x1d6>
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	e006      	b.n	8000f08 <HAL_GPIO_Init+0x1e4>
 8000efa:	2305      	movs	r3, #5
 8000efc:	e004      	b.n	8000f08 <HAL_GPIO_Init+0x1e4>
 8000efe:	2302      	movs	r3, #2
 8000f00:	e002      	b.n	8000f08 <HAL_GPIO_Init+0x1e4>
 8000f02:	2301      	movs	r3, #1
 8000f04:	e000      	b.n	8000f08 <HAL_GPIO_Init+0x1e4>
 8000f06:	2300      	movs	r3, #0
 8000f08:	697a      	ldr	r2, [r7, #20]
 8000f0a:	2103      	movs	r1, #3
 8000f0c:	400a      	ands	r2, r1
 8000f0e:	0092      	lsls	r2, r2, #2
 8000f10:	4093      	lsls	r3, r2
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f18:	4935      	ldr	r1, [pc, #212]	; (8000ff0 <HAL_GPIO_Init+0x2cc>)
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	089b      	lsrs	r3, r3, #2
 8000f1e:	3302      	adds	r3, #2
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f26:	4b36      	ldr	r3, [pc, #216]	; (8001000 <HAL_GPIO_Init+0x2dc>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	43da      	mvns	r2, r3
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	4013      	ands	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685a      	ldr	r2, [r3, #4]
 8000f3a:	2380      	movs	r3, #128	; 0x80
 8000f3c:	025b      	lsls	r3, r3, #9
 8000f3e:	4013      	ands	r3, r2
 8000f40:	d003      	beq.n	8000f4a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f4a:	4b2d      	ldr	r3, [pc, #180]	; (8001000 <HAL_GPIO_Init+0x2dc>)
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000f50:	4b2b      	ldr	r3, [pc, #172]	; (8001000 <HAL_GPIO_Init+0x2dc>)
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	43da      	mvns	r2, r3
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685a      	ldr	r2, [r3, #4]
 8000f64:	2380      	movs	r3, #128	; 0x80
 8000f66:	029b      	lsls	r3, r3, #10
 8000f68:	4013      	ands	r3, r2
 8000f6a:	d003      	beq.n	8000f74 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f74:	4b22      	ldr	r3, [pc, #136]	; (8001000 <HAL_GPIO_Init+0x2dc>)
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f7a:	4b21      	ldr	r3, [pc, #132]	; (8001000 <HAL_GPIO_Init+0x2dc>)
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	43da      	mvns	r2, r3
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	4013      	ands	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685a      	ldr	r2, [r3, #4]
 8000f8e:	2380      	movs	r3, #128	; 0x80
 8000f90:	035b      	lsls	r3, r3, #13
 8000f92:	4013      	ands	r3, r2
 8000f94:	d003      	beq.n	8000f9e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f9e:	4b18      	ldr	r3, [pc, #96]	; (8001000 <HAL_GPIO_Init+0x2dc>)
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000fa4:	4b16      	ldr	r3, [pc, #88]	; (8001000 <HAL_GPIO_Init+0x2dc>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	43da      	mvns	r2, r3
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685a      	ldr	r2, [r3, #4]
 8000fb8:	2380      	movs	r3, #128	; 0x80
 8000fba:	039b      	lsls	r3, r3, #14
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	d003      	beq.n	8000fc8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fc8:	4b0d      	ldr	r3, [pc, #52]	; (8001000 <HAL_GPIO_Init+0x2dc>)
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	40da      	lsrs	r2, r3
 8000fdc:	1e13      	subs	r3, r2, #0
 8000fde:	d000      	beq.n	8000fe2 <HAL_GPIO_Init+0x2be>
 8000fe0:	e6a8      	b.n	8000d34 <HAL_GPIO_Init+0x10>
  } 
}
 8000fe2:	46c0      	nop			; (mov r8, r8)
 8000fe4:	46c0      	nop			; (mov r8, r8)
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	b006      	add	sp, #24
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	40010000 	.word	0x40010000
 8000ff4:	48000400 	.word	0x48000400
 8000ff8:	48000800 	.word	0x48000800
 8000ffc:	48000c00 	.word	0x48000c00
 8001000:	40010400 	.word	0x40010400

08001004 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	0008      	movs	r0, r1
 800100e:	0011      	movs	r1, r2
 8001010:	1cbb      	adds	r3, r7, #2
 8001012:	1c02      	adds	r2, r0, #0
 8001014:	801a      	strh	r2, [r3, #0]
 8001016:	1c7b      	adds	r3, r7, #1
 8001018:	1c0a      	adds	r2, r1, #0
 800101a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800101c:	1c7b      	adds	r3, r7, #1
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d004      	beq.n	800102e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001024:	1cbb      	adds	r3, r7, #2
 8001026:	881a      	ldrh	r2, [r3, #0]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800102c:	e003      	b.n	8001036 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800102e:	1cbb      	adds	r3, r7, #2
 8001030:	881a      	ldrh	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	46bd      	mov	sp, r7
 800103a:	b002      	add	sp, #8
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b084      	sub	sp, #16
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
 8001046:	000a      	movs	r2, r1
 8001048:	1cbb      	adds	r3, r7, #2
 800104a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	695b      	ldr	r3, [r3, #20]
 8001050:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001052:	1cbb      	adds	r3, r7, #2
 8001054:	881b      	ldrh	r3, [r3, #0]
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	4013      	ands	r3, r2
 800105a:	041a      	lsls	r2, r3, #16
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	43db      	mvns	r3, r3
 8001060:	1cb9      	adds	r1, r7, #2
 8001062:	8809      	ldrh	r1, [r1, #0]
 8001064:	400b      	ands	r3, r1
 8001066:	431a      	orrs	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	619a      	str	r2, [r3, #24]
}
 800106c:	46c0      	nop			; (mov r8, r8)
 800106e:	46bd      	mov	sp, r7
 8001070:	b004      	add	sp, #16
 8001072:	bd80      	pop	{r7, pc}

08001074 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d101      	bne.n	8001086 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e301      	b.n	800168a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2201      	movs	r2, #1
 800108c:	4013      	ands	r3, r2
 800108e:	d100      	bne.n	8001092 <HAL_RCC_OscConfig+0x1e>
 8001090:	e08d      	b.n	80011ae <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001092:	4bc3      	ldr	r3, [pc, #780]	; (80013a0 <HAL_RCC_OscConfig+0x32c>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	220c      	movs	r2, #12
 8001098:	4013      	ands	r3, r2
 800109a:	2b04      	cmp	r3, #4
 800109c:	d00e      	beq.n	80010bc <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800109e:	4bc0      	ldr	r3, [pc, #768]	; (80013a0 <HAL_RCC_OscConfig+0x32c>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	220c      	movs	r2, #12
 80010a4:	4013      	ands	r3, r2
 80010a6:	2b08      	cmp	r3, #8
 80010a8:	d116      	bne.n	80010d8 <HAL_RCC_OscConfig+0x64>
 80010aa:	4bbd      	ldr	r3, [pc, #756]	; (80013a0 <HAL_RCC_OscConfig+0x32c>)
 80010ac:	685a      	ldr	r2, [r3, #4]
 80010ae:	2380      	movs	r3, #128	; 0x80
 80010b0:	025b      	lsls	r3, r3, #9
 80010b2:	401a      	ands	r2, r3
 80010b4:	2380      	movs	r3, #128	; 0x80
 80010b6:	025b      	lsls	r3, r3, #9
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d10d      	bne.n	80010d8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010bc:	4bb8      	ldr	r3, [pc, #736]	; (80013a0 <HAL_RCC_OscConfig+0x32c>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	2380      	movs	r3, #128	; 0x80
 80010c2:	029b      	lsls	r3, r3, #10
 80010c4:	4013      	ands	r3, r2
 80010c6:	d100      	bne.n	80010ca <HAL_RCC_OscConfig+0x56>
 80010c8:	e070      	b.n	80011ac <HAL_RCC_OscConfig+0x138>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d000      	beq.n	80010d4 <HAL_RCC_OscConfig+0x60>
 80010d2:	e06b      	b.n	80011ac <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e2d8      	b.n	800168a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d107      	bne.n	80010f0 <HAL_RCC_OscConfig+0x7c>
 80010e0:	4baf      	ldr	r3, [pc, #700]	; (80013a0 <HAL_RCC_OscConfig+0x32c>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	4bae      	ldr	r3, [pc, #696]	; (80013a0 <HAL_RCC_OscConfig+0x32c>)
 80010e6:	2180      	movs	r1, #128	; 0x80
 80010e8:	0249      	lsls	r1, r1, #9
 80010ea:	430a      	orrs	r2, r1
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	e02f      	b.n	8001150 <HAL_RCC_OscConfig+0xdc>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d10c      	bne.n	8001112 <HAL_RCC_OscConfig+0x9e>
 80010f8:	4ba9      	ldr	r3, [pc, #676]	; (80013a0 <HAL_RCC_OscConfig+0x32c>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4ba8      	ldr	r3, [pc, #672]	; (80013a0 <HAL_RCC_OscConfig+0x32c>)
 80010fe:	49a9      	ldr	r1, [pc, #676]	; (80013a4 <HAL_RCC_OscConfig+0x330>)
 8001100:	400a      	ands	r2, r1
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	4ba6      	ldr	r3, [pc, #664]	; (80013a0 <HAL_RCC_OscConfig+0x32c>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4ba5      	ldr	r3, [pc, #660]	; (80013a0 <HAL_RCC_OscConfig+0x32c>)
 800110a:	49a7      	ldr	r1, [pc, #668]	; (80013a8 <HAL_RCC_OscConfig+0x334>)
 800110c:	400a      	ands	r2, r1
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	e01e      	b.n	8001150 <HAL_RCC_OscConfig+0xdc>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	2b05      	cmp	r3, #5
 8001118:	d10e      	bne.n	8001138 <HAL_RCC_OscConfig+0xc4>
 800111a:	4ba1      	ldr	r3, [pc, #644]	; (80013a0 <HAL_RCC_OscConfig+0x32c>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	4ba0      	ldr	r3, [pc, #640]	; (80013a0 <HAL_RCC_OscConfig+0x32c>)
 8001120:	2180      	movs	r1, #128	; 0x80
 8001122:	02c9      	lsls	r1, r1, #11
 8001124:	430a      	orrs	r2, r1
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	4b9d      	ldr	r3, [pc, #628]	; (80013a0 <HAL_RCC_OscConfig+0x32c>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4b9c      	ldr	r3, [pc, #624]	; (80013a0 <HAL_RCC_OscConfig+0x32c>)
 800112e:	2180      	movs	r1, #128	; 0x80
 8001130:	0249      	lsls	r1, r1, #9
 8001132:	430a      	orrs	r2, r1
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	e00b      	b.n	8001150 <HAL_RCC_OscConfig+0xdc>
 8001138:	4b99      	ldr	r3, [pc, #612]	; (80013a0 <HAL_RCC_OscConfig+0x32c>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	4b98      	ldr	r3, [pc, #608]	; (80013a0 <HAL_RCC_OscConfig+0x32c>)
 800113e:	4999      	ldr	r1, [pc, #612]	; (80013a4 <HAL_RCC_OscConfig+0x330>)
 8001140:	400a      	ands	r2, r1
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	4b96      	ldr	r3, [pc, #600]	; (80013a0 <HAL_RCC_OscConfig+0x32c>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	4b95      	ldr	r3, [pc, #596]	; (80013a0 <HAL_RCC_OscConfig+0x32c>)
 800114a:	4997      	ldr	r1, [pc, #604]	; (80013a8 <HAL_RCC_OscConfig+0x334>)
 800114c:	400a      	ands	r2, r1
 800114e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d014      	beq.n	8001182 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001158:	f7ff fc7e 	bl	8000a58 <HAL_GetTick>
 800115c:	0003      	movs	r3, r0
 800115e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001160:	e008      	b.n	8001174 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001162:	f7ff fc79 	bl	8000a58 <HAL_GetTick>
 8001166:	0002      	movs	r2, r0
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	2b64      	cmp	r3, #100	; 0x64
 800116e:	d901      	bls.n	8001174 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001170:	2303      	movs	r3, #3
 8001172:	e28a      	b.n	800168a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001174:	4b8a      	ldr	r3, [pc, #552]	; (80013a0 <HAL_RCC_OscConfig+0x32c>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	2380      	movs	r3, #128	; 0x80
 800117a:	029b      	lsls	r3, r3, #10
 800117c:	4013      	ands	r3, r2
 800117e:	d0f0      	beq.n	8001162 <HAL_RCC_OscConfig+0xee>
 8001180:	e015      	b.n	80011ae <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001182:	f7ff fc69 	bl	8000a58 <HAL_GetTick>
 8001186:	0003      	movs	r3, r0
 8001188:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800118a:	e008      	b.n	800119e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800118c:	f7ff fc64 	bl	8000a58 <HAL_GetTick>
 8001190:	0002      	movs	r2, r0
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b64      	cmp	r3, #100	; 0x64
 8001198:	d901      	bls.n	800119e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e275      	b.n	800168a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800119e:	4b80      	ldr	r3, [pc, #512]	; (80013a0 <HAL_RCC_OscConfig+0x32c>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	2380      	movs	r3, #128	; 0x80
 80011a4:	029b      	lsls	r3, r3, #10
 80011a6:	4013      	ands	r3, r2
 80011a8:	d1f0      	bne.n	800118c <HAL_RCC_OscConfig+0x118>
 80011aa:	e000      	b.n	80011ae <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ac:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2202      	movs	r2, #2
 80011b4:	4013      	ands	r3, r2
 80011b6:	d100      	bne.n	80011ba <HAL_RCC_OscConfig+0x146>
 80011b8:	e069      	b.n	800128e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011ba:	4b79      	ldr	r3, [pc, #484]	; (80013a0 <HAL_RCC_OscConfig+0x32c>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	220c      	movs	r2, #12
 80011c0:	4013      	ands	r3, r2
 80011c2:	d00b      	beq.n	80011dc <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80011c4:	4b76      	ldr	r3, [pc, #472]	; (80013a0 <HAL_RCC_OscConfig+0x32c>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	220c      	movs	r2, #12
 80011ca:	4013      	ands	r3, r2
 80011cc:	2b08      	cmp	r3, #8
 80011ce:	d11c      	bne.n	800120a <HAL_RCC_OscConfig+0x196>
 80011d0:	4b73      	ldr	r3, [pc, #460]	; (80013a0 <HAL_RCC_OscConfig+0x32c>)
 80011d2:	685a      	ldr	r2, [r3, #4]
 80011d4:	2380      	movs	r3, #128	; 0x80
 80011d6:	025b      	lsls	r3, r3, #9
 80011d8:	4013      	ands	r3, r2
 80011da:	d116      	bne.n	800120a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011dc:	4b70      	ldr	r3, [pc, #448]	; (80013a0 <HAL_RCC_OscConfig+0x32c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2202      	movs	r2, #2
 80011e2:	4013      	ands	r3, r2
 80011e4:	d005      	beq.n	80011f2 <HAL_RCC_OscConfig+0x17e>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d001      	beq.n	80011f2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e24b      	b.n	800168a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f2:	4b6b      	ldr	r3, [pc, #428]	; (80013a0 <HAL_RCC_OscConfig+0x32c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	22f8      	movs	r2, #248	; 0xf8
 80011f8:	4393      	bics	r3, r2
 80011fa:	0019      	movs	r1, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	691b      	ldr	r3, [r3, #16]
 8001200:	00da      	lsls	r2, r3, #3
 8001202:	4b67      	ldr	r3, [pc, #412]	; (80013a0 <HAL_RCC_OscConfig+0x32c>)
 8001204:	430a      	orrs	r2, r1
 8001206:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001208:	e041      	b.n	800128e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d024      	beq.n	800125c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001212:	4b63      	ldr	r3, [pc, #396]	; (80013a0 <HAL_RCC_OscConfig+0x32c>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	4b62      	ldr	r3, [pc, #392]	; (80013a0 <HAL_RCC_OscConfig+0x32c>)
 8001218:	2101      	movs	r1, #1
 800121a:	430a      	orrs	r2, r1
 800121c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121e:	f7ff fc1b 	bl	8000a58 <HAL_GetTick>
 8001222:	0003      	movs	r3, r0
 8001224:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001228:	f7ff fc16 	bl	8000a58 <HAL_GetTick>
 800122c:	0002      	movs	r2, r0
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e227      	b.n	800168a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800123a:	4b59      	ldr	r3, [pc, #356]	; (80013a0 <HAL_RCC_OscConfig+0x32c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2202      	movs	r2, #2
 8001240:	4013      	ands	r3, r2
 8001242:	d0f1      	beq.n	8001228 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001244:	4b56      	ldr	r3, [pc, #344]	; (80013a0 <HAL_RCC_OscConfig+0x32c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	22f8      	movs	r2, #248	; 0xf8
 800124a:	4393      	bics	r3, r2
 800124c:	0019      	movs	r1, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	00da      	lsls	r2, r3, #3
 8001254:	4b52      	ldr	r3, [pc, #328]	; (80013a0 <HAL_RCC_OscConfig+0x32c>)
 8001256:	430a      	orrs	r2, r1
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	e018      	b.n	800128e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800125c:	4b50      	ldr	r3, [pc, #320]	; (80013a0 <HAL_RCC_OscConfig+0x32c>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	4b4f      	ldr	r3, [pc, #316]	; (80013a0 <HAL_RCC_OscConfig+0x32c>)
 8001262:	2101      	movs	r1, #1
 8001264:	438a      	bics	r2, r1
 8001266:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001268:	f7ff fbf6 	bl	8000a58 <HAL_GetTick>
 800126c:	0003      	movs	r3, r0
 800126e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001270:	e008      	b.n	8001284 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001272:	f7ff fbf1 	bl	8000a58 <HAL_GetTick>
 8001276:	0002      	movs	r2, r0
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d901      	bls.n	8001284 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001280:	2303      	movs	r3, #3
 8001282:	e202      	b.n	800168a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001284:	4b46      	ldr	r3, [pc, #280]	; (80013a0 <HAL_RCC_OscConfig+0x32c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2202      	movs	r2, #2
 800128a:	4013      	ands	r3, r2
 800128c:	d1f1      	bne.n	8001272 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2208      	movs	r2, #8
 8001294:	4013      	ands	r3, r2
 8001296:	d036      	beq.n	8001306 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	69db      	ldr	r3, [r3, #28]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d019      	beq.n	80012d4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012a0:	4b3f      	ldr	r3, [pc, #252]	; (80013a0 <HAL_RCC_OscConfig+0x32c>)
 80012a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012a4:	4b3e      	ldr	r3, [pc, #248]	; (80013a0 <HAL_RCC_OscConfig+0x32c>)
 80012a6:	2101      	movs	r1, #1
 80012a8:	430a      	orrs	r2, r1
 80012aa:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ac:	f7ff fbd4 	bl	8000a58 <HAL_GetTick>
 80012b0:	0003      	movs	r3, r0
 80012b2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012b4:	e008      	b.n	80012c8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012b6:	f7ff fbcf 	bl	8000a58 <HAL_GetTick>
 80012ba:	0002      	movs	r2, r0
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d901      	bls.n	80012c8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e1e0      	b.n	800168a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012c8:	4b35      	ldr	r3, [pc, #212]	; (80013a0 <HAL_RCC_OscConfig+0x32c>)
 80012ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012cc:	2202      	movs	r2, #2
 80012ce:	4013      	ands	r3, r2
 80012d0:	d0f1      	beq.n	80012b6 <HAL_RCC_OscConfig+0x242>
 80012d2:	e018      	b.n	8001306 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012d4:	4b32      	ldr	r3, [pc, #200]	; (80013a0 <HAL_RCC_OscConfig+0x32c>)
 80012d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012d8:	4b31      	ldr	r3, [pc, #196]	; (80013a0 <HAL_RCC_OscConfig+0x32c>)
 80012da:	2101      	movs	r1, #1
 80012dc:	438a      	bics	r2, r1
 80012de:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e0:	f7ff fbba 	bl	8000a58 <HAL_GetTick>
 80012e4:	0003      	movs	r3, r0
 80012e6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012e8:	e008      	b.n	80012fc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012ea:	f7ff fbb5 	bl	8000a58 <HAL_GetTick>
 80012ee:	0002      	movs	r2, r0
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d901      	bls.n	80012fc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e1c6      	b.n	800168a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012fc:	4b28      	ldr	r3, [pc, #160]	; (80013a0 <HAL_RCC_OscConfig+0x32c>)
 80012fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001300:	2202      	movs	r2, #2
 8001302:	4013      	ands	r3, r2
 8001304:	d1f1      	bne.n	80012ea <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2204      	movs	r2, #4
 800130c:	4013      	ands	r3, r2
 800130e:	d100      	bne.n	8001312 <HAL_RCC_OscConfig+0x29e>
 8001310:	e0b4      	b.n	800147c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001312:	201f      	movs	r0, #31
 8001314:	183b      	adds	r3, r7, r0
 8001316:	2200      	movs	r2, #0
 8001318:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800131a:	4b21      	ldr	r3, [pc, #132]	; (80013a0 <HAL_RCC_OscConfig+0x32c>)
 800131c:	69da      	ldr	r2, [r3, #28]
 800131e:	2380      	movs	r3, #128	; 0x80
 8001320:	055b      	lsls	r3, r3, #21
 8001322:	4013      	ands	r3, r2
 8001324:	d110      	bne.n	8001348 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001326:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <HAL_RCC_OscConfig+0x32c>)
 8001328:	69da      	ldr	r2, [r3, #28]
 800132a:	4b1d      	ldr	r3, [pc, #116]	; (80013a0 <HAL_RCC_OscConfig+0x32c>)
 800132c:	2180      	movs	r1, #128	; 0x80
 800132e:	0549      	lsls	r1, r1, #21
 8001330:	430a      	orrs	r2, r1
 8001332:	61da      	str	r2, [r3, #28]
 8001334:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <HAL_RCC_OscConfig+0x32c>)
 8001336:	69da      	ldr	r2, [r3, #28]
 8001338:	2380      	movs	r3, #128	; 0x80
 800133a:	055b      	lsls	r3, r3, #21
 800133c:	4013      	ands	r3, r2
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001342:	183b      	adds	r3, r7, r0
 8001344:	2201      	movs	r2, #1
 8001346:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001348:	4b18      	ldr	r3, [pc, #96]	; (80013ac <HAL_RCC_OscConfig+0x338>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	2380      	movs	r3, #128	; 0x80
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	4013      	ands	r3, r2
 8001352:	d11a      	bne.n	800138a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001354:	4b15      	ldr	r3, [pc, #84]	; (80013ac <HAL_RCC_OscConfig+0x338>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4b14      	ldr	r3, [pc, #80]	; (80013ac <HAL_RCC_OscConfig+0x338>)
 800135a:	2180      	movs	r1, #128	; 0x80
 800135c:	0049      	lsls	r1, r1, #1
 800135e:	430a      	orrs	r2, r1
 8001360:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001362:	f7ff fb79 	bl	8000a58 <HAL_GetTick>
 8001366:	0003      	movs	r3, r0
 8001368:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800136a:	e008      	b.n	800137e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800136c:	f7ff fb74 	bl	8000a58 <HAL_GetTick>
 8001370:	0002      	movs	r2, r0
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b64      	cmp	r3, #100	; 0x64
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e185      	b.n	800168a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800137e:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <HAL_RCC_OscConfig+0x338>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	2380      	movs	r3, #128	; 0x80
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	4013      	ands	r3, r2
 8001388:	d0f0      	beq.n	800136c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d10e      	bne.n	80013b0 <HAL_RCC_OscConfig+0x33c>
 8001392:	4b03      	ldr	r3, [pc, #12]	; (80013a0 <HAL_RCC_OscConfig+0x32c>)
 8001394:	6a1a      	ldr	r2, [r3, #32]
 8001396:	4b02      	ldr	r3, [pc, #8]	; (80013a0 <HAL_RCC_OscConfig+0x32c>)
 8001398:	2101      	movs	r1, #1
 800139a:	430a      	orrs	r2, r1
 800139c:	621a      	str	r2, [r3, #32]
 800139e:	e035      	b.n	800140c <HAL_RCC_OscConfig+0x398>
 80013a0:	40021000 	.word	0x40021000
 80013a4:	fffeffff 	.word	0xfffeffff
 80013a8:	fffbffff 	.word	0xfffbffff
 80013ac:	40007000 	.word	0x40007000
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d10c      	bne.n	80013d2 <HAL_RCC_OscConfig+0x35e>
 80013b8:	4bb6      	ldr	r3, [pc, #728]	; (8001694 <HAL_RCC_OscConfig+0x620>)
 80013ba:	6a1a      	ldr	r2, [r3, #32]
 80013bc:	4bb5      	ldr	r3, [pc, #724]	; (8001694 <HAL_RCC_OscConfig+0x620>)
 80013be:	2101      	movs	r1, #1
 80013c0:	438a      	bics	r2, r1
 80013c2:	621a      	str	r2, [r3, #32]
 80013c4:	4bb3      	ldr	r3, [pc, #716]	; (8001694 <HAL_RCC_OscConfig+0x620>)
 80013c6:	6a1a      	ldr	r2, [r3, #32]
 80013c8:	4bb2      	ldr	r3, [pc, #712]	; (8001694 <HAL_RCC_OscConfig+0x620>)
 80013ca:	2104      	movs	r1, #4
 80013cc:	438a      	bics	r2, r1
 80013ce:	621a      	str	r2, [r3, #32]
 80013d0:	e01c      	b.n	800140c <HAL_RCC_OscConfig+0x398>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	2b05      	cmp	r3, #5
 80013d8:	d10c      	bne.n	80013f4 <HAL_RCC_OscConfig+0x380>
 80013da:	4bae      	ldr	r3, [pc, #696]	; (8001694 <HAL_RCC_OscConfig+0x620>)
 80013dc:	6a1a      	ldr	r2, [r3, #32]
 80013de:	4bad      	ldr	r3, [pc, #692]	; (8001694 <HAL_RCC_OscConfig+0x620>)
 80013e0:	2104      	movs	r1, #4
 80013e2:	430a      	orrs	r2, r1
 80013e4:	621a      	str	r2, [r3, #32]
 80013e6:	4bab      	ldr	r3, [pc, #684]	; (8001694 <HAL_RCC_OscConfig+0x620>)
 80013e8:	6a1a      	ldr	r2, [r3, #32]
 80013ea:	4baa      	ldr	r3, [pc, #680]	; (8001694 <HAL_RCC_OscConfig+0x620>)
 80013ec:	2101      	movs	r1, #1
 80013ee:	430a      	orrs	r2, r1
 80013f0:	621a      	str	r2, [r3, #32]
 80013f2:	e00b      	b.n	800140c <HAL_RCC_OscConfig+0x398>
 80013f4:	4ba7      	ldr	r3, [pc, #668]	; (8001694 <HAL_RCC_OscConfig+0x620>)
 80013f6:	6a1a      	ldr	r2, [r3, #32]
 80013f8:	4ba6      	ldr	r3, [pc, #664]	; (8001694 <HAL_RCC_OscConfig+0x620>)
 80013fa:	2101      	movs	r1, #1
 80013fc:	438a      	bics	r2, r1
 80013fe:	621a      	str	r2, [r3, #32]
 8001400:	4ba4      	ldr	r3, [pc, #656]	; (8001694 <HAL_RCC_OscConfig+0x620>)
 8001402:	6a1a      	ldr	r2, [r3, #32]
 8001404:	4ba3      	ldr	r3, [pc, #652]	; (8001694 <HAL_RCC_OscConfig+0x620>)
 8001406:	2104      	movs	r1, #4
 8001408:	438a      	bics	r2, r1
 800140a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d014      	beq.n	800143e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001414:	f7ff fb20 	bl	8000a58 <HAL_GetTick>
 8001418:	0003      	movs	r3, r0
 800141a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800141c:	e009      	b.n	8001432 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800141e:	f7ff fb1b 	bl	8000a58 <HAL_GetTick>
 8001422:	0002      	movs	r2, r0
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	4a9b      	ldr	r2, [pc, #620]	; (8001698 <HAL_RCC_OscConfig+0x624>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e12b      	b.n	800168a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001432:	4b98      	ldr	r3, [pc, #608]	; (8001694 <HAL_RCC_OscConfig+0x620>)
 8001434:	6a1b      	ldr	r3, [r3, #32]
 8001436:	2202      	movs	r2, #2
 8001438:	4013      	ands	r3, r2
 800143a:	d0f0      	beq.n	800141e <HAL_RCC_OscConfig+0x3aa>
 800143c:	e013      	b.n	8001466 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800143e:	f7ff fb0b 	bl	8000a58 <HAL_GetTick>
 8001442:	0003      	movs	r3, r0
 8001444:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001446:	e009      	b.n	800145c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001448:	f7ff fb06 	bl	8000a58 <HAL_GetTick>
 800144c:	0002      	movs	r2, r0
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	4a91      	ldr	r2, [pc, #580]	; (8001698 <HAL_RCC_OscConfig+0x624>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e116      	b.n	800168a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800145c:	4b8d      	ldr	r3, [pc, #564]	; (8001694 <HAL_RCC_OscConfig+0x620>)
 800145e:	6a1b      	ldr	r3, [r3, #32]
 8001460:	2202      	movs	r2, #2
 8001462:	4013      	ands	r3, r2
 8001464:	d1f0      	bne.n	8001448 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001466:	231f      	movs	r3, #31
 8001468:	18fb      	adds	r3, r7, r3
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d105      	bne.n	800147c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001470:	4b88      	ldr	r3, [pc, #544]	; (8001694 <HAL_RCC_OscConfig+0x620>)
 8001472:	69da      	ldr	r2, [r3, #28]
 8001474:	4b87      	ldr	r3, [pc, #540]	; (8001694 <HAL_RCC_OscConfig+0x620>)
 8001476:	4989      	ldr	r1, [pc, #548]	; (800169c <HAL_RCC_OscConfig+0x628>)
 8001478:	400a      	ands	r2, r1
 800147a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2210      	movs	r2, #16
 8001482:	4013      	ands	r3, r2
 8001484:	d063      	beq.n	800154e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d12a      	bne.n	80014e4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800148e:	4b81      	ldr	r3, [pc, #516]	; (8001694 <HAL_RCC_OscConfig+0x620>)
 8001490:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001492:	4b80      	ldr	r3, [pc, #512]	; (8001694 <HAL_RCC_OscConfig+0x620>)
 8001494:	2104      	movs	r1, #4
 8001496:	430a      	orrs	r2, r1
 8001498:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800149a:	4b7e      	ldr	r3, [pc, #504]	; (8001694 <HAL_RCC_OscConfig+0x620>)
 800149c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800149e:	4b7d      	ldr	r3, [pc, #500]	; (8001694 <HAL_RCC_OscConfig+0x620>)
 80014a0:	2101      	movs	r1, #1
 80014a2:	430a      	orrs	r2, r1
 80014a4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a6:	f7ff fad7 	bl	8000a58 <HAL_GetTick>
 80014aa:	0003      	movs	r3, r0
 80014ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80014b0:	f7ff fad2 	bl	8000a58 <HAL_GetTick>
 80014b4:	0002      	movs	r2, r0
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e0e3      	b.n	800168a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80014c2:	4b74      	ldr	r3, [pc, #464]	; (8001694 <HAL_RCC_OscConfig+0x620>)
 80014c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014c6:	2202      	movs	r2, #2
 80014c8:	4013      	ands	r3, r2
 80014ca:	d0f1      	beq.n	80014b0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80014cc:	4b71      	ldr	r3, [pc, #452]	; (8001694 <HAL_RCC_OscConfig+0x620>)
 80014ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014d0:	22f8      	movs	r2, #248	; 0xf8
 80014d2:	4393      	bics	r3, r2
 80014d4:	0019      	movs	r1, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	00da      	lsls	r2, r3, #3
 80014dc:	4b6d      	ldr	r3, [pc, #436]	; (8001694 <HAL_RCC_OscConfig+0x620>)
 80014de:	430a      	orrs	r2, r1
 80014e0:	635a      	str	r2, [r3, #52]	; 0x34
 80014e2:	e034      	b.n	800154e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	695b      	ldr	r3, [r3, #20]
 80014e8:	3305      	adds	r3, #5
 80014ea:	d111      	bne.n	8001510 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80014ec:	4b69      	ldr	r3, [pc, #420]	; (8001694 <HAL_RCC_OscConfig+0x620>)
 80014ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014f0:	4b68      	ldr	r3, [pc, #416]	; (8001694 <HAL_RCC_OscConfig+0x620>)
 80014f2:	2104      	movs	r1, #4
 80014f4:	438a      	bics	r2, r1
 80014f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80014f8:	4b66      	ldr	r3, [pc, #408]	; (8001694 <HAL_RCC_OscConfig+0x620>)
 80014fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014fc:	22f8      	movs	r2, #248	; 0xf8
 80014fe:	4393      	bics	r3, r2
 8001500:	0019      	movs	r1, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	00da      	lsls	r2, r3, #3
 8001508:	4b62      	ldr	r3, [pc, #392]	; (8001694 <HAL_RCC_OscConfig+0x620>)
 800150a:	430a      	orrs	r2, r1
 800150c:	635a      	str	r2, [r3, #52]	; 0x34
 800150e:	e01e      	b.n	800154e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001510:	4b60      	ldr	r3, [pc, #384]	; (8001694 <HAL_RCC_OscConfig+0x620>)
 8001512:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001514:	4b5f      	ldr	r3, [pc, #380]	; (8001694 <HAL_RCC_OscConfig+0x620>)
 8001516:	2104      	movs	r1, #4
 8001518:	430a      	orrs	r2, r1
 800151a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800151c:	4b5d      	ldr	r3, [pc, #372]	; (8001694 <HAL_RCC_OscConfig+0x620>)
 800151e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001520:	4b5c      	ldr	r3, [pc, #368]	; (8001694 <HAL_RCC_OscConfig+0x620>)
 8001522:	2101      	movs	r1, #1
 8001524:	438a      	bics	r2, r1
 8001526:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001528:	f7ff fa96 	bl	8000a58 <HAL_GetTick>
 800152c:	0003      	movs	r3, r0
 800152e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001530:	e008      	b.n	8001544 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001532:	f7ff fa91 	bl	8000a58 <HAL_GetTick>
 8001536:	0002      	movs	r2, r0
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e0a2      	b.n	800168a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001544:	4b53      	ldr	r3, [pc, #332]	; (8001694 <HAL_RCC_OscConfig+0x620>)
 8001546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001548:	2202      	movs	r2, #2
 800154a:	4013      	ands	r3, r2
 800154c:	d1f1      	bne.n	8001532 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a1b      	ldr	r3, [r3, #32]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d100      	bne.n	8001558 <HAL_RCC_OscConfig+0x4e4>
 8001556:	e097      	b.n	8001688 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001558:	4b4e      	ldr	r3, [pc, #312]	; (8001694 <HAL_RCC_OscConfig+0x620>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	220c      	movs	r2, #12
 800155e:	4013      	ands	r3, r2
 8001560:	2b08      	cmp	r3, #8
 8001562:	d100      	bne.n	8001566 <HAL_RCC_OscConfig+0x4f2>
 8001564:	e06b      	b.n	800163e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a1b      	ldr	r3, [r3, #32]
 800156a:	2b02      	cmp	r3, #2
 800156c:	d14c      	bne.n	8001608 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800156e:	4b49      	ldr	r3, [pc, #292]	; (8001694 <HAL_RCC_OscConfig+0x620>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	4b48      	ldr	r3, [pc, #288]	; (8001694 <HAL_RCC_OscConfig+0x620>)
 8001574:	494a      	ldr	r1, [pc, #296]	; (80016a0 <HAL_RCC_OscConfig+0x62c>)
 8001576:	400a      	ands	r2, r1
 8001578:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157a:	f7ff fa6d 	bl	8000a58 <HAL_GetTick>
 800157e:	0003      	movs	r3, r0
 8001580:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001584:	f7ff fa68 	bl	8000a58 <HAL_GetTick>
 8001588:	0002      	movs	r2, r0
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b02      	cmp	r3, #2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e079      	b.n	800168a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001596:	4b3f      	ldr	r3, [pc, #252]	; (8001694 <HAL_RCC_OscConfig+0x620>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	2380      	movs	r3, #128	; 0x80
 800159c:	049b      	lsls	r3, r3, #18
 800159e:	4013      	ands	r3, r2
 80015a0:	d1f0      	bne.n	8001584 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015a2:	4b3c      	ldr	r3, [pc, #240]	; (8001694 <HAL_RCC_OscConfig+0x620>)
 80015a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a6:	220f      	movs	r2, #15
 80015a8:	4393      	bics	r3, r2
 80015aa:	0019      	movs	r1, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015b0:	4b38      	ldr	r3, [pc, #224]	; (8001694 <HAL_RCC_OscConfig+0x620>)
 80015b2:	430a      	orrs	r2, r1
 80015b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80015b6:	4b37      	ldr	r3, [pc, #220]	; (8001694 <HAL_RCC_OscConfig+0x620>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	4a3a      	ldr	r2, [pc, #232]	; (80016a4 <HAL_RCC_OscConfig+0x630>)
 80015bc:	4013      	ands	r3, r2
 80015be:	0019      	movs	r1, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c8:	431a      	orrs	r2, r3
 80015ca:	4b32      	ldr	r3, [pc, #200]	; (8001694 <HAL_RCC_OscConfig+0x620>)
 80015cc:	430a      	orrs	r2, r1
 80015ce:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015d0:	4b30      	ldr	r3, [pc, #192]	; (8001694 <HAL_RCC_OscConfig+0x620>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4b2f      	ldr	r3, [pc, #188]	; (8001694 <HAL_RCC_OscConfig+0x620>)
 80015d6:	2180      	movs	r1, #128	; 0x80
 80015d8:	0449      	lsls	r1, r1, #17
 80015da:	430a      	orrs	r2, r1
 80015dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015de:	f7ff fa3b 	bl	8000a58 <HAL_GetTick>
 80015e2:	0003      	movs	r3, r0
 80015e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015e8:	f7ff fa36 	bl	8000a58 <HAL_GetTick>
 80015ec:	0002      	movs	r2, r0
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e047      	b.n	800168a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015fa:	4b26      	ldr	r3, [pc, #152]	; (8001694 <HAL_RCC_OscConfig+0x620>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	2380      	movs	r3, #128	; 0x80
 8001600:	049b      	lsls	r3, r3, #18
 8001602:	4013      	ands	r3, r2
 8001604:	d0f0      	beq.n	80015e8 <HAL_RCC_OscConfig+0x574>
 8001606:	e03f      	b.n	8001688 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001608:	4b22      	ldr	r3, [pc, #136]	; (8001694 <HAL_RCC_OscConfig+0x620>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b21      	ldr	r3, [pc, #132]	; (8001694 <HAL_RCC_OscConfig+0x620>)
 800160e:	4924      	ldr	r1, [pc, #144]	; (80016a0 <HAL_RCC_OscConfig+0x62c>)
 8001610:	400a      	ands	r2, r1
 8001612:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001614:	f7ff fa20 	bl	8000a58 <HAL_GetTick>
 8001618:	0003      	movs	r3, r0
 800161a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800161c:	e008      	b.n	8001630 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800161e:	f7ff fa1b 	bl	8000a58 <HAL_GetTick>
 8001622:	0002      	movs	r2, r0
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e02c      	b.n	800168a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001630:	4b18      	ldr	r3, [pc, #96]	; (8001694 <HAL_RCC_OscConfig+0x620>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	2380      	movs	r3, #128	; 0x80
 8001636:	049b      	lsls	r3, r3, #18
 8001638:	4013      	ands	r3, r2
 800163a:	d1f0      	bne.n	800161e <HAL_RCC_OscConfig+0x5aa>
 800163c:	e024      	b.n	8001688 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a1b      	ldr	r3, [r3, #32]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d101      	bne.n	800164a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e01f      	b.n	800168a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800164a:	4b12      	ldr	r3, [pc, #72]	; (8001694 <HAL_RCC_OscConfig+0x620>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001650:	4b10      	ldr	r3, [pc, #64]	; (8001694 <HAL_RCC_OscConfig+0x620>)
 8001652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001654:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	2380      	movs	r3, #128	; 0x80
 800165a:	025b      	lsls	r3, r3, #9
 800165c:	401a      	ands	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001662:	429a      	cmp	r2, r3
 8001664:	d10e      	bne.n	8001684 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	220f      	movs	r2, #15
 800166a:	401a      	ands	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001670:	429a      	cmp	r2, r3
 8001672:	d107      	bne.n	8001684 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001674:	697a      	ldr	r2, [r7, #20]
 8001676:	23f0      	movs	r3, #240	; 0xf0
 8001678:	039b      	lsls	r3, r3, #14
 800167a:	401a      	ands	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001680:	429a      	cmp	r2, r3
 8001682:	d001      	beq.n	8001688 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e000      	b.n	800168a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	0018      	movs	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	b008      	add	sp, #32
 8001690:	bd80      	pop	{r7, pc}
 8001692:	46c0      	nop			; (mov r8, r8)
 8001694:	40021000 	.word	0x40021000
 8001698:	00001388 	.word	0x00001388
 800169c:	efffffff 	.word	0xefffffff
 80016a0:	feffffff 	.word	0xfeffffff
 80016a4:	ffc2ffff 	.word	0xffc2ffff

080016a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d101      	bne.n	80016bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e0b3      	b.n	8001824 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016bc:	4b5b      	ldr	r3, [pc, #364]	; (800182c <HAL_RCC_ClockConfig+0x184>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2201      	movs	r2, #1
 80016c2:	4013      	ands	r3, r2
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d911      	bls.n	80016ee <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ca:	4b58      	ldr	r3, [pc, #352]	; (800182c <HAL_RCC_ClockConfig+0x184>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2201      	movs	r2, #1
 80016d0:	4393      	bics	r3, r2
 80016d2:	0019      	movs	r1, r3
 80016d4:	4b55      	ldr	r3, [pc, #340]	; (800182c <HAL_RCC_ClockConfig+0x184>)
 80016d6:	683a      	ldr	r2, [r7, #0]
 80016d8:	430a      	orrs	r2, r1
 80016da:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016dc:	4b53      	ldr	r3, [pc, #332]	; (800182c <HAL_RCC_ClockConfig+0x184>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2201      	movs	r2, #1
 80016e2:	4013      	ands	r3, r2
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d001      	beq.n	80016ee <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e09a      	b.n	8001824 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2202      	movs	r2, #2
 80016f4:	4013      	ands	r3, r2
 80016f6:	d015      	beq.n	8001724 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2204      	movs	r2, #4
 80016fe:	4013      	ands	r3, r2
 8001700:	d006      	beq.n	8001710 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001702:	4b4b      	ldr	r3, [pc, #300]	; (8001830 <HAL_RCC_ClockConfig+0x188>)
 8001704:	685a      	ldr	r2, [r3, #4]
 8001706:	4b4a      	ldr	r3, [pc, #296]	; (8001830 <HAL_RCC_ClockConfig+0x188>)
 8001708:	21e0      	movs	r1, #224	; 0xe0
 800170a:	00c9      	lsls	r1, r1, #3
 800170c:	430a      	orrs	r2, r1
 800170e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001710:	4b47      	ldr	r3, [pc, #284]	; (8001830 <HAL_RCC_ClockConfig+0x188>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	22f0      	movs	r2, #240	; 0xf0
 8001716:	4393      	bics	r3, r2
 8001718:	0019      	movs	r1, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689a      	ldr	r2, [r3, #8]
 800171e:	4b44      	ldr	r3, [pc, #272]	; (8001830 <HAL_RCC_ClockConfig+0x188>)
 8001720:	430a      	orrs	r2, r1
 8001722:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2201      	movs	r2, #1
 800172a:	4013      	ands	r3, r2
 800172c:	d040      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d107      	bne.n	8001746 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001736:	4b3e      	ldr	r3, [pc, #248]	; (8001830 <HAL_RCC_ClockConfig+0x188>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	2380      	movs	r3, #128	; 0x80
 800173c:	029b      	lsls	r3, r3, #10
 800173e:	4013      	ands	r3, r2
 8001740:	d114      	bne.n	800176c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e06e      	b.n	8001824 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b02      	cmp	r3, #2
 800174c:	d107      	bne.n	800175e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800174e:	4b38      	ldr	r3, [pc, #224]	; (8001830 <HAL_RCC_ClockConfig+0x188>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	2380      	movs	r3, #128	; 0x80
 8001754:	049b      	lsls	r3, r3, #18
 8001756:	4013      	ands	r3, r2
 8001758:	d108      	bne.n	800176c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e062      	b.n	8001824 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800175e:	4b34      	ldr	r3, [pc, #208]	; (8001830 <HAL_RCC_ClockConfig+0x188>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2202      	movs	r2, #2
 8001764:	4013      	ands	r3, r2
 8001766:	d101      	bne.n	800176c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e05b      	b.n	8001824 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800176c:	4b30      	ldr	r3, [pc, #192]	; (8001830 <HAL_RCC_ClockConfig+0x188>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2203      	movs	r2, #3
 8001772:	4393      	bics	r3, r2
 8001774:	0019      	movs	r1, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685a      	ldr	r2, [r3, #4]
 800177a:	4b2d      	ldr	r3, [pc, #180]	; (8001830 <HAL_RCC_ClockConfig+0x188>)
 800177c:	430a      	orrs	r2, r1
 800177e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001780:	f7ff f96a 	bl	8000a58 <HAL_GetTick>
 8001784:	0003      	movs	r3, r0
 8001786:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001788:	e009      	b.n	800179e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800178a:	f7ff f965 	bl	8000a58 <HAL_GetTick>
 800178e:	0002      	movs	r2, r0
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	4a27      	ldr	r2, [pc, #156]	; (8001834 <HAL_RCC_ClockConfig+0x18c>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d901      	bls.n	800179e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e042      	b.n	8001824 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800179e:	4b24      	ldr	r3, [pc, #144]	; (8001830 <HAL_RCC_ClockConfig+0x188>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	220c      	movs	r2, #12
 80017a4:	401a      	ands	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d1ec      	bne.n	800178a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017b0:	4b1e      	ldr	r3, [pc, #120]	; (800182c <HAL_RCC_ClockConfig+0x184>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2201      	movs	r2, #1
 80017b6:	4013      	ands	r3, r2
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d211      	bcs.n	80017e2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017be:	4b1b      	ldr	r3, [pc, #108]	; (800182c <HAL_RCC_ClockConfig+0x184>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2201      	movs	r2, #1
 80017c4:	4393      	bics	r3, r2
 80017c6:	0019      	movs	r1, r3
 80017c8:	4b18      	ldr	r3, [pc, #96]	; (800182c <HAL_RCC_ClockConfig+0x184>)
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	430a      	orrs	r2, r1
 80017ce:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d0:	4b16      	ldr	r3, [pc, #88]	; (800182c <HAL_RCC_ClockConfig+0x184>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2201      	movs	r2, #1
 80017d6:	4013      	ands	r3, r2
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d001      	beq.n	80017e2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e020      	b.n	8001824 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2204      	movs	r2, #4
 80017e8:	4013      	ands	r3, r2
 80017ea:	d009      	beq.n	8001800 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80017ec:	4b10      	ldr	r3, [pc, #64]	; (8001830 <HAL_RCC_ClockConfig+0x188>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	4a11      	ldr	r2, [pc, #68]	; (8001838 <HAL_RCC_ClockConfig+0x190>)
 80017f2:	4013      	ands	r3, r2
 80017f4:	0019      	movs	r1, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	68da      	ldr	r2, [r3, #12]
 80017fa:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <HAL_RCC_ClockConfig+0x188>)
 80017fc:	430a      	orrs	r2, r1
 80017fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001800:	f000 f820 	bl	8001844 <HAL_RCC_GetSysClockFreq>
 8001804:	0001      	movs	r1, r0
 8001806:	4b0a      	ldr	r3, [pc, #40]	; (8001830 <HAL_RCC_ClockConfig+0x188>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	091b      	lsrs	r3, r3, #4
 800180c:	220f      	movs	r2, #15
 800180e:	4013      	ands	r3, r2
 8001810:	4a0a      	ldr	r2, [pc, #40]	; (800183c <HAL_RCC_ClockConfig+0x194>)
 8001812:	5cd3      	ldrb	r3, [r2, r3]
 8001814:	000a      	movs	r2, r1
 8001816:	40da      	lsrs	r2, r3
 8001818:	4b09      	ldr	r3, [pc, #36]	; (8001840 <HAL_RCC_ClockConfig+0x198>)
 800181a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800181c:	2000      	movs	r0, #0
 800181e:	f7ff f8d5 	bl	80009cc <HAL_InitTick>
  
  return HAL_OK;
 8001822:	2300      	movs	r3, #0
}
 8001824:	0018      	movs	r0, r3
 8001826:	46bd      	mov	sp, r7
 8001828:	b004      	add	sp, #16
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40022000 	.word	0x40022000
 8001830:	40021000 	.word	0x40021000
 8001834:	00001388 	.word	0x00001388
 8001838:	fffff8ff 	.word	0xfffff8ff
 800183c:	08003424 	.word	0x08003424
 8001840:	20000000 	.word	0x20000000

08001844 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001844:	b590      	push	{r4, r7, lr}
 8001846:	b08f      	sub	sp, #60	; 0x3c
 8001848:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800184a:	2314      	movs	r3, #20
 800184c:	18fb      	adds	r3, r7, r3
 800184e:	4a2b      	ldr	r2, [pc, #172]	; (80018fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001850:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001852:	c313      	stmia	r3!, {r0, r1, r4}
 8001854:	6812      	ldr	r2, [r2, #0]
 8001856:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001858:	1d3b      	adds	r3, r7, #4
 800185a:	4a29      	ldr	r2, [pc, #164]	; (8001900 <HAL_RCC_GetSysClockFreq+0xbc>)
 800185c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800185e:	c313      	stmia	r3!, {r0, r1, r4}
 8001860:	6812      	ldr	r2, [r2, #0]
 8001862:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001864:	2300      	movs	r3, #0
 8001866:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001868:	2300      	movs	r3, #0
 800186a:	62bb      	str	r3, [r7, #40]	; 0x28
 800186c:	2300      	movs	r3, #0
 800186e:	637b      	str	r3, [r7, #52]	; 0x34
 8001870:	2300      	movs	r3, #0
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001874:	2300      	movs	r3, #0
 8001876:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001878:	4b22      	ldr	r3, [pc, #136]	; (8001904 <HAL_RCC_GetSysClockFreq+0xc0>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800187e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001880:	220c      	movs	r2, #12
 8001882:	4013      	ands	r3, r2
 8001884:	2b04      	cmp	r3, #4
 8001886:	d002      	beq.n	800188e <HAL_RCC_GetSysClockFreq+0x4a>
 8001888:	2b08      	cmp	r3, #8
 800188a:	d003      	beq.n	8001894 <HAL_RCC_GetSysClockFreq+0x50>
 800188c:	e02d      	b.n	80018ea <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800188e:	4b1e      	ldr	r3, [pc, #120]	; (8001908 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001890:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001892:	e02d      	b.n	80018f0 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001896:	0c9b      	lsrs	r3, r3, #18
 8001898:	220f      	movs	r2, #15
 800189a:	4013      	ands	r3, r2
 800189c:	2214      	movs	r2, #20
 800189e:	18ba      	adds	r2, r7, r2
 80018a0:	5cd3      	ldrb	r3, [r2, r3]
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80018a4:	4b17      	ldr	r3, [pc, #92]	; (8001904 <HAL_RCC_GetSysClockFreq+0xc0>)
 80018a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a8:	220f      	movs	r2, #15
 80018aa:	4013      	ands	r3, r2
 80018ac:	1d3a      	adds	r2, r7, #4
 80018ae:	5cd3      	ldrb	r3, [r2, r3]
 80018b0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80018b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018b4:	2380      	movs	r3, #128	; 0x80
 80018b6:	025b      	lsls	r3, r3, #9
 80018b8:	4013      	ands	r3, r2
 80018ba:	d009      	beq.n	80018d0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80018bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018be:	4812      	ldr	r0, [pc, #72]	; (8001908 <HAL_RCC_GetSysClockFreq+0xc4>)
 80018c0:	f7fe fc22 	bl	8000108 <__udivsi3>
 80018c4:	0003      	movs	r3, r0
 80018c6:	001a      	movs	r2, r3
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	4353      	muls	r3, r2
 80018cc:	637b      	str	r3, [r7, #52]	; 0x34
 80018ce:	e009      	b.n	80018e4 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80018d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018d2:	000a      	movs	r2, r1
 80018d4:	0152      	lsls	r2, r2, #5
 80018d6:	1a52      	subs	r2, r2, r1
 80018d8:	0193      	lsls	r3, r2, #6
 80018da:	1a9b      	subs	r3, r3, r2
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	185b      	adds	r3, r3, r1
 80018e0:	021b      	lsls	r3, r3, #8
 80018e2:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80018e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018e6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018e8:	e002      	b.n	80018f0 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018ea:	4b07      	ldr	r3, [pc, #28]	; (8001908 <HAL_RCC_GetSysClockFreq+0xc4>)
 80018ec:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018ee:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80018f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80018f2:	0018      	movs	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	b00f      	add	sp, #60	; 0x3c
 80018f8:	bd90      	pop	{r4, r7, pc}
 80018fa:	46c0      	nop			; (mov r8, r8)
 80018fc:	08003404 	.word	0x08003404
 8001900:	08003414 	.word	0x08003414
 8001904:	40021000 	.word	0x40021000
 8001908:	007a1200 	.word	0x007a1200

0800190c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001910:	4b02      	ldr	r3, [pc, #8]	; (800191c <HAL_RCC_GetHCLKFreq+0x10>)
 8001912:	681b      	ldr	r3, [r3, #0]
}
 8001914:	0018      	movs	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	46c0      	nop			; (mov r8, r8)
 800191c:	20000000 	.word	0x20000000

08001920 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001924:	f7ff fff2 	bl	800190c <HAL_RCC_GetHCLKFreq>
 8001928:	0001      	movs	r1, r0
 800192a:	4b06      	ldr	r3, [pc, #24]	; (8001944 <HAL_RCC_GetPCLK1Freq+0x24>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	0a1b      	lsrs	r3, r3, #8
 8001930:	2207      	movs	r2, #7
 8001932:	4013      	ands	r3, r2
 8001934:	4a04      	ldr	r2, [pc, #16]	; (8001948 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001936:	5cd3      	ldrb	r3, [r2, r3]
 8001938:	40d9      	lsrs	r1, r3
 800193a:	000b      	movs	r3, r1
}    
 800193c:	0018      	movs	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	46c0      	nop			; (mov r8, r8)
 8001944:	40021000 	.word	0x40021000
 8001948:	08003434 	.word	0x08003434

0800194c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001954:	2300      	movs	r3, #0
 8001956:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001958:	2300      	movs	r3, #0
 800195a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	2380      	movs	r3, #128	; 0x80
 8001962:	025b      	lsls	r3, r3, #9
 8001964:	4013      	ands	r3, r2
 8001966:	d100      	bne.n	800196a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001968:	e08e      	b.n	8001a88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800196a:	2017      	movs	r0, #23
 800196c:	183b      	adds	r3, r7, r0
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001972:	4b57      	ldr	r3, [pc, #348]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001974:	69da      	ldr	r2, [r3, #28]
 8001976:	2380      	movs	r3, #128	; 0x80
 8001978:	055b      	lsls	r3, r3, #21
 800197a:	4013      	ands	r3, r2
 800197c:	d110      	bne.n	80019a0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800197e:	4b54      	ldr	r3, [pc, #336]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001980:	69da      	ldr	r2, [r3, #28]
 8001982:	4b53      	ldr	r3, [pc, #332]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001984:	2180      	movs	r1, #128	; 0x80
 8001986:	0549      	lsls	r1, r1, #21
 8001988:	430a      	orrs	r2, r1
 800198a:	61da      	str	r2, [r3, #28]
 800198c:	4b50      	ldr	r3, [pc, #320]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800198e:	69da      	ldr	r2, [r3, #28]
 8001990:	2380      	movs	r3, #128	; 0x80
 8001992:	055b      	lsls	r3, r3, #21
 8001994:	4013      	ands	r3, r2
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800199a:	183b      	adds	r3, r7, r0
 800199c:	2201      	movs	r2, #1
 800199e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a0:	4b4c      	ldr	r3, [pc, #304]	; (8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	2380      	movs	r3, #128	; 0x80
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	4013      	ands	r3, r2
 80019aa:	d11a      	bne.n	80019e2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ac:	4b49      	ldr	r3, [pc, #292]	; (8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4b48      	ldr	r3, [pc, #288]	; (8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80019b2:	2180      	movs	r1, #128	; 0x80
 80019b4:	0049      	lsls	r1, r1, #1
 80019b6:	430a      	orrs	r2, r1
 80019b8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ba:	f7ff f84d 	bl	8000a58 <HAL_GetTick>
 80019be:	0003      	movs	r3, r0
 80019c0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c2:	e008      	b.n	80019d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019c4:	f7ff f848 	bl	8000a58 <HAL_GetTick>
 80019c8:	0002      	movs	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b64      	cmp	r3, #100	; 0x64
 80019d0:	d901      	bls.n	80019d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e077      	b.n	8001ac6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d6:	4b3f      	ldr	r3, [pc, #252]	; (8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	2380      	movs	r3, #128	; 0x80
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	4013      	ands	r3, r2
 80019e0:	d0f0      	beq.n	80019c4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80019e2:	4b3b      	ldr	r3, [pc, #236]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80019e4:	6a1a      	ldr	r2, [r3, #32]
 80019e6:	23c0      	movs	r3, #192	; 0xc0
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4013      	ands	r3, r2
 80019ec:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d034      	beq.n	8001a5e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685a      	ldr	r2, [r3, #4]
 80019f8:	23c0      	movs	r3, #192	; 0xc0
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4013      	ands	r3, r2
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d02c      	beq.n	8001a5e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a04:	4b32      	ldr	r3, [pc, #200]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	4a33      	ldr	r2, [pc, #204]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a0e:	4b30      	ldr	r3, [pc, #192]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a10:	6a1a      	ldr	r2, [r3, #32]
 8001a12:	4b2f      	ldr	r3, [pc, #188]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a14:	2180      	movs	r1, #128	; 0x80
 8001a16:	0249      	lsls	r1, r1, #9
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a1c:	4b2c      	ldr	r3, [pc, #176]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a1e:	6a1a      	ldr	r2, [r3, #32]
 8001a20:	4b2b      	ldr	r3, [pc, #172]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a22:	492e      	ldr	r1, [pc, #184]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001a24:	400a      	ands	r2, r1
 8001a26:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001a28:	4b29      	ldr	r3, [pc, #164]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2201      	movs	r2, #1
 8001a32:	4013      	ands	r3, r2
 8001a34:	d013      	beq.n	8001a5e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a36:	f7ff f80f 	bl	8000a58 <HAL_GetTick>
 8001a3a:	0003      	movs	r3, r0
 8001a3c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a3e:	e009      	b.n	8001a54 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a40:	f7ff f80a 	bl	8000a58 <HAL_GetTick>
 8001a44:	0002      	movs	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	4a25      	ldr	r2, [pc, #148]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e038      	b.n	8001ac6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a54:	4b1e      	ldr	r3, [pc, #120]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a56:	6a1b      	ldr	r3, [r3, #32]
 8001a58:	2202      	movs	r2, #2
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	d0f0      	beq.n	8001a40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a5e:	4b1c      	ldr	r3, [pc, #112]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	4a1d      	ldr	r2, [pc, #116]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001a64:	4013      	ands	r3, r2
 8001a66:	0019      	movs	r1, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685a      	ldr	r2, [r3, #4]
 8001a6c:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a72:	2317      	movs	r3, #23
 8001a74:	18fb      	adds	r3, r7, r3
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d105      	bne.n	8001a88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a7c:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a7e:	69da      	ldr	r2, [r3, #28]
 8001a80:	4b13      	ldr	r3, [pc, #76]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a82:	4918      	ldr	r1, [pc, #96]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001a84:	400a      	ands	r2, r1
 8001a86:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	4013      	ands	r3, r2
 8001a90:	d009      	beq.n	8001aa6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001a92:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	2203      	movs	r2, #3
 8001a98:	4393      	bics	r3, r2
 8001a9a:	0019      	movs	r1, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2220      	movs	r2, #32
 8001aac:	4013      	ands	r3, r2
 8001aae:	d009      	beq.n	8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ab0:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab4:	2210      	movs	r2, #16
 8001ab6:	4393      	bics	r3, r2
 8001ab8:	0019      	movs	r1, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68da      	ldr	r2, [r3, #12]
 8001abe:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	b006      	add	sp, #24
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	46c0      	nop			; (mov r8, r8)
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	40007000 	.word	0x40007000
 8001ad8:	fffffcff 	.word	0xfffffcff
 8001adc:	fffeffff 	.word	0xfffeffff
 8001ae0:	00001388 	.word	0x00001388
 8001ae4:	efffffff 	.word	0xefffffff

08001ae8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e042      	b.n	8001b80 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	223d      	movs	r2, #61	; 0x3d
 8001afe:	5c9b      	ldrb	r3, [r3, r2]
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d107      	bne.n	8001b16 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	223c      	movs	r2, #60	; 0x3c
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	0018      	movs	r0, r3
 8001b12:	f7fe fe6f 	bl	80007f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	223d      	movs	r2, #61	; 0x3d
 8001b1a:	2102      	movs	r1, #2
 8001b1c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3304      	adds	r3, #4
 8001b26:	0019      	movs	r1, r3
 8001b28:	0010      	movs	r0, r2
 8001b2a:	f000 fa35 	bl	8001f98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2246      	movs	r2, #70	; 0x46
 8001b32:	2101      	movs	r1, #1
 8001b34:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	223e      	movs	r2, #62	; 0x3e
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	5499      	strb	r1, [r3, r2]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	223f      	movs	r2, #63	; 0x3f
 8001b42:	2101      	movs	r1, #1
 8001b44:	5499      	strb	r1, [r3, r2]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2240      	movs	r2, #64	; 0x40
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	5499      	strb	r1, [r3, r2]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2241      	movs	r2, #65	; 0x41
 8001b52:	2101      	movs	r1, #1
 8001b54:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2242      	movs	r2, #66	; 0x42
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	5499      	strb	r1, [r3, r2]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2243      	movs	r2, #67	; 0x43
 8001b62:	2101      	movs	r1, #1
 8001b64:	5499      	strb	r1, [r3, r2]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2244      	movs	r2, #68	; 0x44
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	5499      	strb	r1, [r3, r2]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2245      	movs	r2, #69	; 0x45
 8001b72:	2101      	movs	r1, #1
 8001b74:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	223d      	movs	r2, #61	; 0x3d
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	0018      	movs	r0, r3
 8001b82:	46bd      	mov	sp, r7
 8001b84:	b002      	add	sp, #8
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	2202      	movs	r2, #2
 8001b98:	4013      	ands	r3, r2
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d124      	bne.n	8001be8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	2202      	movs	r2, #2
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d11d      	bne.n	8001be8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2203      	movs	r2, #3
 8001bb2:	4252      	negs	r2, r2
 8001bb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	2203      	movs	r2, #3
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d004      	beq.n	8001bd2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	0018      	movs	r0, r3
 8001bcc:	f000 f9cc 	bl	8001f68 <HAL_TIM_IC_CaptureCallback>
 8001bd0:	e007      	b.n	8001be2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	f000 f9bf 	bl	8001f58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	0018      	movs	r0, r3
 8001bde:	f000 f9cb 	bl	8001f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	2204      	movs	r2, #4
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	d125      	bne.n	8001c42 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	2204      	movs	r2, #4
 8001bfe:	4013      	ands	r3, r2
 8001c00:	2b04      	cmp	r3, #4
 8001c02:	d11e      	bne.n	8001c42 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2205      	movs	r2, #5
 8001c0a:	4252      	negs	r2, r2
 8001c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2202      	movs	r2, #2
 8001c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	699a      	ldr	r2, [r3, #24]
 8001c1a:	23c0      	movs	r3, #192	; 0xc0
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d004      	beq.n	8001c2c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	0018      	movs	r0, r3
 8001c26:	f000 f99f 	bl	8001f68 <HAL_TIM_IC_CaptureCallback>
 8001c2a:	e007      	b.n	8001c3c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	0018      	movs	r0, r3
 8001c30:	f000 f992 	bl	8001f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	0018      	movs	r0, r3
 8001c38:	f000 f99e 	bl	8001f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	2208      	movs	r2, #8
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	2b08      	cmp	r3, #8
 8001c4e:	d124      	bne.n	8001c9a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	2208      	movs	r2, #8
 8001c58:	4013      	ands	r3, r2
 8001c5a:	2b08      	cmp	r3, #8
 8001c5c:	d11d      	bne.n	8001c9a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2209      	movs	r2, #9
 8001c64:	4252      	negs	r2, r2
 8001c66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2204      	movs	r2, #4
 8001c6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	69db      	ldr	r3, [r3, #28]
 8001c74:	2203      	movs	r2, #3
 8001c76:	4013      	ands	r3, r2
 8001c78:	d004      	beq.n	8001c84 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	f000 f973 	bl	8001f68 <HAL_TIM_IC_CaptureCallback>
 8001c82:	e007      	b.n	8001c94 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	0018      	movs	r0, r3
 8001c88:	f000 f966 	bl	8001f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	0018      	movs	r0, r3
 8001c90:	f000 f972 	bl	8001f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	2210      	movs	r2, #16
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	2b10      	cmp	r3, #16
 8001ca6:	d125      	bne.n	8001cf4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	2210      	movs	r2, #16
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	2b10      	cmp	r3, #16
 8001cb4:	d11e      	bne.n	8001cf4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2211      	movs	r2, #17
 8001cbc:	4252      	negs	r2, r2
 8001cbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2208      	movs	r2, #8
 8001cc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	69da      	ldr	r2, [r3, #28]
 8001ccc:	23c0      	movs	r3, #192	; 0xc0
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	d004      	beq.n	8001cde <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f000 f946 	bl	8001f68 <HAL_TIM_IC_CaptureCallback>
 8001cdc:	e007      	b.n	8001cee <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	f000 f939 	bl	8001f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	0018      	movs	r0, r3
 8001cea:	f000 f945 	bl	8001f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d10f      	bne.n	8001d22 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d108      	bne.n	8001d22 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2202      	movs	r2, #2
 8001d16:	4252      	negs	r2, r2
 8001d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	f000 f913 	bl	8001f48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	2280      	movs	r2, #128	; 0x80
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	2b80      	cmp	r3, #128	; 0x80
 8001d2e:	d10f      	bne.n	8001d50 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	2280      	movs	r2, #128	; 0x80
 8001d38:	4013      	ands	r3, r2
 8001d3a:	2b80      	cmp	r3, #128	; 0x80
 8001d3c:	d108      	bne.n	8001d50 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2281      	movs	r2, #129	; 0x81
 8001d44:	4252      	negs	r2, r2
 8001d46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	f000 fa84 	bl	8002258 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	2240      	movs	r2, #64	; 0x40
 8001d58:	4013      	ands	r3, r2
 8001d5a:	2b40      	cmp	r3, #64	; 0x40
 8001d5c:	d10f      	bne.n	8001d7e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	2240      	movs	r2, #64	; 0x40
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b40      	cmp	r3, #64	; 0x40
 8001d6a:	d108      	bne.n	8001d7e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2241      	movs	r2, #65	; 0x41
 8001d72:	4252      	negs	r2, r2
 8001d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	0018      	movs	r0, r3
 8001d7a:	f000 f905 	bl	8001f88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	2220      	movs	r2, #32
 8001d86:	4013      	ands	r3, r2
 8001d88:	2b20      	cmp	r3, #32
 8001d8a:	d10f      	bne.n	8001dac <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	2220      	movs	r2, #32
 8001d94:	4013      	ands	r3, r2
 8001d96:	2b20      	cmp	r3, #32
 8001d98:	d108      	bne.n	8001dac <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2221      	movs	r2, #33	; 0x21
 8001da0:	4252      	negs	r2, r2
 8001da2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	0018      	movs	r0, r3
 8001da8:	f000 fa4e 	bl	8002248 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001dac:	46c0      	nop			; (mov r8, r8)
 8001dae:	46bd      	mov	sp, r7
 8001db0:	b002      	add	sp, #8
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	223c      	movs	r2, #60	; 0x3c
 8001dc2:	5c9b      	ldrb	r3, [r3, r2]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d101      	bne.n	8001dcc <HAL_TIM_ConfigClockSource+0x18>
 8001dc8:	2302      	movs	r3, #2
 8001dca:	e0b7      	b.n	8001f3c <HAL_TIM_ConfigClockSource+0x188>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	223c      	movs	r2, #60	; 0x3c
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	223d      	movs	r2, #61	; 0x3d
 8001dd8:	2102      	movs	r1, #2
 8001dda:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2277      	movs	r2, #119	; 0x77
 8001de8:	4393      	bics	r3, r2
 8001dea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4a55      	ldr	r2, [pc, #340]	; (8001f44 <HAL_TIM_ConfigClockSource+0x190>)
 8001df0:	4013      	ands	r3, r2
 8001df2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2280      	movs	r2, #128	; 0x80
 8001e02:	0192      	lsls	r2, r2, #6
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d040      	beq.n	8001e8a <HAL_TIM_ConfigClockSource+0xd6>
 8001e08:	2280      	movs	r2, #128	; 0x80
 8001e0a:	0192      	lsls	r2, r2, #6
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d900      	bls.n	8001e12 <HAL_TIM_ConfigClockSource+0x5e>
 8001e10:	e088      	b.n	8001f24 <HAL_TIM_ConfigClockSource+0x170>
 8001e12:	2280      	movs	r2, #128	; 0x80
 8001e14:	0152      	lsls	r2, r2, #5
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d100      	bne.n	8001e1c <HAL_TIM_ConfigClockSource+0x68>
 8001e1a:	e085      	b.n	8001f28 <HAL_TIM_ConfigClockSource+0x174>
 8001e1c:	2280      	movs	r2, #128	; 0x80
 8001e1e:	0152      	lsls	r2, r2, #5
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d900      	bls.n	8001e26 <HAL_TIM_ConfigClockSource+0x72>
 8001e24:	e07e      	b.n	8001f24 <HAL_TIM_ConfigClockSource+0x170>
 8001e26:	2b70      	cmp	r3, #112	; 0x70
 8001e28:	d018      	beq.n	8001e5c <HAL_TIM_ConfigClockSource+0xa8>
 8001e2a:	d900      	bls.n	8001e2e <HAL_TIM_ConfigClockSource+0x7a>
 8001e2c:	e07a      	b.n	8001f24 <HAL_TIM_ConfigClockSource+0x170>
 8001e2e:	2b60      	cmp	r3, #96	; 0x60
 8001e30:	d04f      	beq.n	8001ed2 <HAL_TIM_ConfigClockSource+0x11e>
 8001e32:	d900      	bls.n	8001e36 <HAL_TIM_ConfigClockSource+0x82>
 8001e34:	e076      	b.n	8001f24 <HAL_TIM_ConfigClockSource+0x170>
 8001e36:	2b50      	cmp	r3, #80	; 0x50
 8001e38:	d03b      	beq.n	8001eb2 <HAL_TIM_ConfigClockSource+0xfe>
 8001e3a:	d900      	bls.n	8001e3e <HAL_TIM_ConfigClockSource+0x8a>
 8001e3c:	e072      	b.n	8001f24 <HAL_TIM_ConfigClockSource+0x170>
 8001e3e:	2b40      	cmp	r3, #64	; 0x40
 8001e40:	d057      	beq.n	8001ef2 <HAL_TIM_ConfigClockSource+0x13e>
 8001e42:	d900      	bls.n	8001e46 <HAL_TIM_ConfigClockSource+0x92>
 8001e44:	e06e      	b.n	8001f24 <HAL_TIM_ConfigClockSource+0x170>
 8001e46:	2b30      	cmp	r3, #48	; 0x30
 8001e48:	d063      	beq.n	8001f12 <HAL_TIM_ConfigClockSource+0x15e>
 8001e4a:	d86b      	bhi.n	8001f24 <HAL_TIM_ConfigClockSource+0x170>
 8001e4c:	2b20      	cmp	r3, #32
 8001e4e:	d060      	beq.n	8001f12 <HAL_TIM_ConfigClockSource+0x15e>
 8001e50:	d868      	bhi.n	8001f24 <HAL_TIM_ConfigClockSource+0x170>
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d05d      	beq.n	8001f12 <HAL_TIM_ConfigClockSource+0x15e>
 8001e56:	2b10      	cmp	r3, #16
 8001e58:	d05b      	beq.n	8001f12 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001e5a:	e063      	b.n	8001f24 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6818      	ldr	r0, [r3, #0]
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	6899      	ldr	r1, [r3, #8]
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	f000 f97a 	bl	8002164 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2277      	movs	r2, #119	; 0x77
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	609a      	str	r2, [r3, #8]
      break;
 8001e88:	e04f      	b.n	8001f2a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6818      	ldr	r0, [r3, #0]
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	6899      	ldr	r1, [r3, #8]
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	f000 f963 	bl	8002164 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2180      	movs	r1, #128	; 0x80
 8001eaa:	01c9      	lsls	r1, r1, #7
 8001eac:	430a      	orrs	r2, r1
 8001eae:	609a      	str	r2, [r3, #8]
      break;
 8001eb0:	e03b      	b.n	8001f2a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6818      	ldr	r0, [r3, #0]
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	6859      	ldr	r1, [r3, #4]
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	001a      	movs	r2, r3
 8001ec0:	f000 f8d6 	bl	8002070 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2150      	movs	r1, #80	; 0x50
 8001eca:	0018      	movs	r0, r3
 8001ecc:	f000 f930 	bl	8002130 <TIM_ITRx_SetConfig>
      break;
 8001ed0:	e02b      	b.n	8001f2a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6818      	ldr	r0, [r3, #0]
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	6859      	ldr	r1, [r3, #4]
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	001a      	movs	r2, r3
 8001ee0:	f000 f8f4 	bl	80020cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2160      	movs	r1, #96	; 0x60
 8001eea:	0018      	movs	r0, r3
 8001eec:	f000 f920 	bl	8002130 <TIM_ITRx_SetConfig>
      break;
 8001ef0:	e01b      	b.n	8001f2a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6818      	ldr	r0, [r3, #0]
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	6859      	ldr	r1, [r3, #4]
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	001a      	movs	r2, r3
 8001f00:	f000 f8b6 	bl	8002070 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2140      	movs	r1, #64	; 0x40
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	f000 f910 	bl	8002130 <TIM_ITRx_SetConfig>
      break;
 8001f10:	e00b      	b.n	8001f2a <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	0019      	movs	r1, r3
 8001f1c:	0010      	movs	r0, r2
 8001f1e:	f000 f907 	bl	8002130 <TIM_ITRx_SetConfig>
        break;
 8001f22:	e002      	b.n	8001f2a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8001f24:	46c0      	nop			; (mov r8, r8)
 8001f26:	e000      	b.n	8001f2a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8001f28:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	223d      	movs	r2, #61	; 0x3d
 8001f2e:	2101      	movs	r1, #1
 8001f30:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	223c      	movs	r2, #60	; 0x3c
 8001f36:	2100      	movs	r1, #0
 8001f38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	b004      	add	sp, #16
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	ffff00ff 	.word	0xffff00ff

08001f48 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001f50:	46c0      	nop			; (mov r8, r8)
 8001f52:	46bd      	mov	sp, r7
 8001f54:	b002      	add	sp, #8
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f60:	46c0      	nop			; (mov r8, r8)
 8001f62:	46bd      	mov	sp, r7
 8001f64:	b002      	add	sp, #8
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f70:	46c0      	nop			; (mov r8, r8)
 8001f72:	46bd      	mov	sp, r7
 8001f74:	b002      	add	sp, #8
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f80:	46c0      	nop			; (mov r8, r8)
 8001f82:	46bd      	mov	sp, r7
 8001f84:	b002      	add	sp, #8
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f90:	46c0      	nop			; (mov r8, r8)
 8001f92:	46bd      	mov	sp, r7
 8001f94:	b002      	add	sp, #8
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a2b      	ldr	r2, [pc, #172]	; (8002058 <TIM_Base_SetConfig+0xc0>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d003      	beq.n	8001fb8 <TIM_Base_SetConfig+0x20>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a2a      	ldr	r2, [pc, #168]	; (800205c <TIM_Base_SetConfig+0xc4>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d108      	bne.n	8001fca <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2270      	movs	r2, #112	; 0x70
 8001fbc:	4393      	bics	r3, r2
 8001fbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a22      	ldr	r2, [pc, #136]	; (8002058 <TIM_Base_SetConfig+0xc0>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d00f      	beq.n	8001ff2 <TIM_Base_SetConfig+0x5a>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a21      	ldr	r2, [pc, #132]	; (800205c <TIM_Base_SetConfig+0xc4>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d00b      	beq.n	8001ff2 <TIM_Base_SetConfig+0x5a>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a20      	ldr	r2, [pc, #128]	; (8002060 <TIM_Base_SetConfig+0xc8>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d007      	beq.n	8001ff2 <TIM_Base_SetConfig+0x5a>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a1f      	ldr	r2, [pc, #124]	; (8002064 <TIM_Base_SetConfig+0xcc>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d003      	beq.n	8001ff2 <TIM_Base_SetConfig+0x5a>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a1e      	ldr	r2, [pc, #120]	; (8002068 <TIM_Base_SetConfig+0xd0>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d108      	bne.n	8002004 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	4a1d      	ldr	r2, [pc, #116]	; (800206c <TIM_Base_SetConfig+0xd4>)
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	4313      	orrs	r3, r2
 8002002:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2280      	movs	r2, #128	; 0x80
 8002008:	4393      	bics	r3, r2
 800200a:	001a      	movs	r2, r3
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	695b      	ldr	r3, [r3, #20]
 8002010:	4313      	orrs	r3, r2
 8002012:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	689a      	ldr	r2, [r3, #8]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a0a      	ldr	r2, [pc, #40]	; (8002058 <TIM_Base_SetConfig+0xc0>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d007      	beq.n	8002042 <TIM_Base_SetConfig+0xaa>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a0b      	ldr	r2, [pc, #44]	; (8002064 <TIM_Base_SetConfig+0xcc>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d003      	beq.n	8002042 <TIM_Base_SetConfig+0xaa>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a0a      	ldr	r2, [pc, #40]	; (8002068 <TIM_Base_SetConfig+0xd0>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d103      	bne.n	800204a <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	691a      	ldr	r2, [r3, #16]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	615a      	str	r2, [r3, #20]
}
 8002050:	46c0      	nop			; (mov r8, r8)
 8002052:	46bd      	mov	sp, r7
 8002054:	b004      	add	sp, #16
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40012c00 	.word	0x40012c00
 800205c:	40000400 	.word	0x40000400
 8002060:	40002000 	.word	0x40002000
 8002064:	40014400 	.word	0x40014400
 8002068:	40014800 	.word	0x40014800
 800206c:	fffffcff 	.word	0xfffffcff

08002070 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	2201      	movs	r2, #1
 8002088:	4393      	bics	r3, r2
 800208a:	001a      	movs	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	22f0      	movs	r2, #240	; 0xf0
 800209a:	4393      	bics	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	011b      	lsls	r3, r3, #4
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	220a      	movs	r2, #10
 80020ac:	4393      	bics	r3, r2
 80020ae:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	621a      	str	r2, [r3, #32]
}
 80020c4:	46c0      	nop			; (mov r8, r8)
 80020c6:	46bd      	mov	sp, r7
 80020c8:	b006      	add	sp, #24
 80020ca:	bd80      	pop	{r7, pc}

080020cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	2210      	movs	r2, #16
 80020de:	4393      	bics	r3, r2
 80020e0:	001a      	movs	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	4a0d      	ldr	r2, [pc, #52]	; (800212c <TIM_TI2_ConfigInputStage+0x60>)
 80020f6:	4013      	ands	r3, r2
 80020f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	031b      	lsls	r3, r3, #12
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	4313      	orrs	r3, r2
 8002102:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	22a0      	movs	r2, #160	; 0xa0
 8002108:	4393      	bics	r3, r2
 800210a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	011b      	lsls	r3, r3, #4
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	4313      	orrs	r3, r2
 8002114:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	697a      	ldr	r2, [r7, #20]
 800211a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	621a      	str	r2, [r3, #32]
}
 8002122:	46c0      	nop			; (mov r8, r8)
 8002124:	46bd      	mov	sp, r7
 8002126:	b006      	add	sp, #24
 8002128:	bd80      	pop	{r7, pc}
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	ffff0fff 	.word	0xffff0fff

08002130 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2270      	movs	r2, #112	; 0x70
 8002144:	4393      	bics	r3, r2
 8002146:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	4313      	orrs	r3, r2
 800214e:	2207      	movs	r2, #7
 8002150:	4313      	orrs	r3, r2
 8002152:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	609a      	str	r2, [r3, #8]
}
 800215a:	46c0      	nop			; (mov r8, r8)
 800215c:	46bd      	mov	sp, r7
 800215e:	b004      	add	sp, #16
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
 8002170:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	4a09      	ldr	r2, [pc, #36]	; (80021a0 <TIM_ETR_SetConfig+0x3c>)
 800217c:	4013      	ands	r3, r2
 800217e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	021a      	lsls	r2, r3, #8
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	431a      	orrs	r2, r3
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	4313      	orrs	r3, r2
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	4313      	orrs	r3, r2
 8002190:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	609a      	str	r2, [r3, #8]
}
 8002198:	46c0      	nop			; (mov r8, r8)
 800219a:	46bd      	mov	sp, r7
 800219c:	b006      	add	sp, #24
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	ffff00ff 	.word	0xffff00ff

080021a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	223c      	movs	r2, #60	; 0x3c
 80021b2:	5c9b      	ldrb	r3, [r3, r2]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d101      	bne.n	80021bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80021b8:	2302      	movs	r3, #2
 80021ba:	e03c      	b.n	8002236 <HAL_TIMEx_MasterConfigSynchronization+0x92>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	223c      	movs	r2, #60	; 0x3c
 80021c0:	2101      	movs	r1, #1
 80021c2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	223d      	movs	r2, #61	; 0x3d
 80021c8:	2102      	movs	r1, #2
 80021ca:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2270      	movs	r2, #112	; 0x70
 80021e0:	4393      	bics	r3, r2
 80021e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a11      	ldr	r2, [pc, #68]	; (8002240 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d004      	beq.n	800220a <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a0f      	ldr	r2, [pc, #60]	; (8002244 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d10c      	bne.n	8002224 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	2280      	movs	r2, #128	; 0x80
 800220e:	4393      	bics	r3, r2
 8002210:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	68ba      	ldr	r2, [r7, #8]
 8002218:	4313      	orrs	r3, r2
 800221a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68ba      	ldr	r2, [r7, #8]
 8002222:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	223d      	movs	r2, #61	; 0x3d
 8002228:	2101      	movs	r1, #1
 800222a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	223c      	movs	r2, #60	; 0x3c
 8002230:	2100      	movs	r1, #0
 8002232:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	0018      	movs	r0, r3
 8002238:	46bd      	mov	sp, r7
 800223a:	b004      	add	sp, #16
 800223c:	bd80      	pop	{r7, pc}
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	40012c00 	.word	0x40012c00
 8002244:	40000400 	.word	0x40000400

08002248 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002250:	46c0      	nop			; (mov r8, r8)
 8002252:	46bd      	mov	sp, r7
 8002254:	b002      	add	sp, #8
 8002256:	bd80      	pop	{r7, pc}

08002258 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002260:	46c0      	nop			; (mov r8, r8)
 8002262:	46bd      	mov	sp, r7
 8002264:	b002      	add	sp, #8
 8002266:	bd80      	pop	{r7, pc}

08002268 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e044      	b.n	8002304 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800227e:	2b00      	cmp	r3, #0
 8002280:	d107      	bne.n	8002292 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2274      	movs	r2, #116	; 0x74
 8002286:	2100      	movs	r1, #0
 8002288:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	0018      	movs	r0, r3
 800228e:	f7fe fb09 	bl	80008a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2224      	movs	r2, #36	; 0x24
 8002296:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2101      	movs	r1, #1
 80022a4:	438a      	bics	r2, r1
 80022a6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	0018      	movs	r0, r3
 80022ac:	f000 faf0 	bl	8002890 <UART_SetConfig>
 80022b0:	0003      	movs	r3, r0
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d101      	bne.n	80022ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e024      	b.n	8002304 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	0018      	movs	r0, r3
 80022c6:	f000 fc0d 	bl	8002ae4 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	685a      	ldr	r2, [r3, #4]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	490d      	ldr	r1, [pc, #52]	; (800230c <HAL_UART_Init+0xa4>)
 80022d6:	400a      	ands	r2, r1
 80022d8:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2108      	movs	r1, #8
 80022e6:	438a      	bics	r2, r1
 80022e8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2101      	movs	r1, #1
 80022f6:	430a      	orrs	r2, r1
 80022f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	0018      	movs	r0, r3
 80022fe:	f000 fca5 	bl	8002c4c <UART_CheckIdleState>
 8002302:	0003      	movs	r3, r0
}
 8002304:	0018      	movs	r0, r3
 8002306:	46bd      	mov	sp, r7
 8002308:	b002      	add	sp, #8
 800230a:	bd80      	pop	{r7, pc}
 800230c:	fffff7ff 	.word	0xfffff7ff

08002310 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	1dbb      	adds	r3, r7, #6
 800231c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002322:	2b20      	cmp	r3, #32
 8002324:	d159      	bne.n	80023da <HAL_UART_Transmit_IT+0xca>
  {
    if ((pData == NULL) || (Size == 0U))
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <HAL_UART_Transmit_IT+0x24>
 800232c:	1dbb      	adds	r3, r7, #6
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e051      	b.n	80023dc <HAL_UART_Transmit_IT+0xcc>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	2380      	movs	r3, #128	; 0x80
 800233e:	015b      	lsls	r3, r3, #5
 8002340:	429a      	cmp	r2, r3
 8002342:	d109      	bne.n	8002358 <HAL_UART_Transmit_IT+0x48>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d105      	bne.n	8002358 <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	2201      	movs	r2, #1
 8002350:	4013      	ands	r3, r2
 8002352:	d001      	beq.n	8002358 <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e041      	b.n	80023dc <HAL_UART_Transmit_IT+0xcc>
      }
    }

    __HAL_LOCK(huart);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2274      	movs	r2, #116	; 0x74
 800235c:	5c9b      	ldrb	r3, [r3, r2]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d101      	bne.n	8002366 <HAL_UART_Transmit_IT+0x56>
 8002362:	2302      	movs	r3, #2
 8002364:	e03a      	b.n	80023dc <HAL_UART_Transmit_IT+0xcc>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2274      	movs	r2, #116	; 0x74
 800236a:	2101      	movs	r1, #1
 800236c:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	68ba      	ldr	r2, [r7, #8]
 8002372:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	1dba      	adds	r2, r7, #6
 8002378:	2150      	movs	r1, #80	; 0x50
 800237a:	8812      	ldrh	r2, [r2, #0]
 800237c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	1dba      	adds	r2, r7, #6
 8002382:	2152      	movs	r1, #82	; 0x52
 8002384:	8812      	ldrh	r2, [r2, #0]
 8002386:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2280      	movs	r2, #128	; 0x80
 8002392:	2100      	movs	r1, #0
 8002394:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2221      	movs	r2, #33	; 0x21
 800239a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	689a      	ldr	r2, [r3, #8]
 80023a0:	2380      	movs	r3, #128	; 0x80
 80023a2:	015b      	lsls	r3, r3, #5
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d107      	bne.n	80023b8 <HAL_UART_Transmit_IT+0xa8>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d103      	bne.n	80023b8 <HAL_UART_Transmit_IT+0xa8>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	4a0c      	ldr	r2, [pc, #48]	; (80023e4 <HAL_UART_Transmit_IT+0xd4>)
 80023b4:	669a      	str	r2, [r3, #104]	; 0x68
 80023b6:	e002      	b.n	80023be <HAL_UART_Transmit_IT+0xae>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	4a0b      	ldr	r2, [pc, #44]	; (80023e8 <HAL_UART_Transmit_IT+0xd8>)
 80023bc:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2274      	movs	r2, #116	; 0x74
 80023c2:	2100      	movs	r1, #0
 80023c4:	5499      	strb	r1, [r3, r2]

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2180      	movs	r1, #128	; 0x80
 80023d2:	430a      	orrs	r2, r1
 80023d4:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80023d6:	2300      	movs	r3, #0
 80023d8:	e000      	b.n	80023dc <HAL_UART_Transmit_IT+0xcc>
  }
  else
  {
    return HAL_BUSY;
 80023da:	2302      	movs	r3, #2
  }
}
 80023dc:	0018      	movs	r0, r3
 80023de:	46bd      	mov	sp, r7
 80023e0:	b004      	add	sp, #16
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	08002fcb 	.word	0x08002fcb
 80023e8:	08002f5b 	.word	0x08002f5b

080023ec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	1dbb      	adds	r3, r7, #6
 80023f8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023fe:	2b20      	cmp	r3, #32
 8002400:	d13f      	bne.n	8002482 <HAL_UART_Receive_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d003      	beq.n	8002410 <HAL_UART_Receive_IT+0x24>
 8002408:	1dbb      	adds	r3, r7, #6
 800240a:	881b      	ldrh	r3, [r3, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e037      	b.n	8002484 <HAL_UART_Receive_IT+0x98>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	2380      	movs	r3, #128	; 0x80
 800241a:	015b      	lsls	r3, r3, #5
 800241c:	429a      	cmp	r2, r3
 800241e:	d109      	bne.n	8002434 <HAL_UART_Receive_IT+0x48>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d105      	bne.n	8002434 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	2201      	movs	r2, #1
 800242c:	4013      	ands	r3, r2
 800242e:	d001      	beq.n	8002434 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e027      	b.n	8002484 <HAL_UART_Receive_IT+0x98>
      }
    }

    __HAL_LOCK(huart);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2274      	movs	r2, #116	; 0x74
 8002438:	5c9b      	ldrb	r3, [r3, r2]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d101      	bne.n	8002442 <HAL_UART_Receive_IT+0x56>
 800243e:	2302      	movs	r3, #2
 8002440:	e020      	b.n	8002484 <HAL_UART_Receive_IT+0x98>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2274      	movs	r2, #116	; 0x74
 8002446:	2101      	movs	r1, #1
 8002448:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	2380      	movs	r3, #128	; 0x80
 8002458:	041b      	lsls	r3, r3, #16
 800245a:	4013      	ands	r3, r2
 800245c:	d008      	beq.n	8002470 <HAL_UART_Receive_IT+0x84>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2180      	movs	r1, #128	; 0x80
 800246a:	04c9      	lsls	r1, r1, #19
 800246c:	430a      	orrs	r2, r1
 800246e:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002470:	1dbb      	adds	r3, r7, #6
 8002472:	881a      	ldrh	r2, [r3, #0]
 8002474:	68b9      	ldr	r1, [r7, #8]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	0018      	movs	r0, r3
 800247a:	f000 fcad 	bl	8002dd8 <UART_Start_Receive_IT>
 800247e:	0003      	movs	r3, r0
 8002480:	e000      	b.n	8002484 <HAL_UART_Receive_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 8002482:	2302      	movs	r3, #2
  }
}
 8002484:	0018      	movs	r0, r3
 8002486:	46bd      	mov	sp, r7
 8002488:	b004      	add	sp, #16
 800248a:	bd80      	pop	{r7, pc}

0800248c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b088      	sub	sp, #32
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	4ab4      	ldr	r2, [pc, #720]	; (8002780 <HAL_UART_IRQHandler+0x2f4>)
 80024b0:	4013      	ands	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d112      	bne.n	80024e0 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	2220      	movs	r2, #32
 80024be:	4013      	ands	r3, r2
 80024c0:	d00e      	beq.n	80024e0 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	2220      	movs	r2, #32
 80024c6:	4013      	ands	r3, r2
 80024c8:	d00a      	beq.n	80024e0 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d100      	bne.n	80024d4 <HAL_UART_IRQHandler+0x48>
 80024d2:	e1ba      	b.n	800284a <HAL_UART_IRQHandler+0x3be>
      {
        huart->RxISR(huart);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	0010      	movs	r0, r2
 80024dc:	4798      	blx	r3
      }
      return;
 80024de:	e1b4      	b.n	800284a <HAL_UART_IRQHandler+0x3be>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d100      	bne.n	80024e8 <HAL_UART_IRQHandler+0x5c>
 80024e6:	e0d9      	b.n	800269c <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	2201      	movs	r2, #1
 80024ec:	4013      	ands	r3, r2
 80024ee:	d104      	bne.n	80024fa <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	4aa4      	ldr	r2, [pc, #656]	; (8002784 <HAL_UART_IRQHandler+0x2f8>)
 80024f4:	4013      	ands	r3, r2
 80024f6:	d100      	bne.n	80024fa <HAL_UART_IRQHandler+0x6e>
 80024f8:	e0d0      	b.n	800269c <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	2201      	movs	r2, #1
 80024fe:	4013      	ands	r3, r2
 8002500:	d010      	beq.n	8002524 <HAL_UART_IRQHandler+0x98>
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	2380      	movs	r3, #128	; 0x80
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	4013      	ands	r3, r2
 800250a:	d00b      	beq.n	8002524 <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2201      	movs	r2, #1
 8002512:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2280      	movs	r2, #128	; 0x80
 8002518:	589b      	ldr	r3, [r3, r2]
 800251a:	2201      	movs	r2, #1
 800251c:	431a      	orrs	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2180      	movs	r1, #128	; 0x80
 8002522:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	2202      	movs	r2, #2
 8002528:	4013      	ands	r3, r2
 800252a:	d00f      	beq.n	800254c <HAL_UART_IRQHandler+0xc0>
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	2201      	movs	r2, #1
 8002530:	4013      	ands	r3, r2
 8002532:	d00b      	beq.n	800254c <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2202      	movs	r2, #2
 800253a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2280      	movs	r2, #128	; 0x80
 8002540:	589b      	ldr	r3, [r3, r2]
 8002542:	2204      	movs	r2, #4
 8002544:	431a      	orrs	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2180      	movs	r1, #128	; 0x80
 800254a:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	2204      	movs	r2, #4
 8002550:	4013      	ands	r3, r2
 8002552:	d00f      	beq.n	8002574 <HAL_UART_IRQHandler+0xe8>
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	2201      	movs	r2, #1
 8002558:	4013      	ands	r3, r2
 800255a:	d00b      	beq.n	8002574 <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2204      	movs	r2, #4
 8002562:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2280      	movs	r2, #128	; 0x80
 8002568:	589b      	ldr	r3, [r3, r2]
 800256a:	2202      	movs	r2, #2
 800256c:	431a      	orrs	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2180      	movs	r1, #128	; 0x80
 8002572:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	2208      	movs	r2, #8
 8002578:	4013      	ands	r3, r2
 800257a:	d013      	beq.n	80025a4 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	2220      	movs	r2, #32
 8002580:	4013      	ands	r3, r2
 8002582:	d103      	bne.n	800258c <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	2201      	movs	r2, #1
 8002588:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800258a:	d00b      	beq.n	80025a4 <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2208      	movs	r2, #8
 8002592:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2280      	movs	r2, #128	; 0x80
 8002598:	589b      	ldr	r3, [r3, r2]
 800259a:	2208      	movs	r2, #8
 800259c:	431a      	orrs	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2180      	movs	r1, #128	; 0x80
 80025a2:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80025a4:	69fa      	ldr	r2, [r7, #28]
 80025a6:	2380      	movs	r3, #128	; 0x80
 80025a8:	011b      	lsls	r3, r3, #4
 80025aa:	4013      	ands	r3, r2
 80025ac:	d011      	beq.n	80025d2 <HAL_UART_IRQHandler+0x146>
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	2380      	movs	r3, #128	; 0x80
 80025b2:	04db      	lsls	r3, r3, #19
 80025b4:	4013      	ands	r3, r2
 80025b6:	d00c      	beq.n	80025d2 <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2280      	movs	r2, #128	; 0x80
 80025be:	0112      	lsls	r2, r2, #4
 80025c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2280      	movs	r2, #128	; 0x80
 80025c6:	589b      	ldr	r3, [r3, r2]
 80025c8:	2220      	movs	r2, #32
 80025ca:	431a      	orrs	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2180      	movs	r1, #128	; 0x80
 80025d0:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2280      	movs	r2, #128	; 0x80
 80025d6:	589b      	ldr	r3, [r3, r2]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d100      	bne.n	80025de <HAL_UART_IRQHandler+0x152>
 80025dc:	e137      	b.n	800284e <HAL_UART_IRQHandler+0x3c2>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	2220      	movs	r2, #32
 80025e2:	4013      	ands	r3, r2
 80025e4:	d00c      	beq.n	8002600 <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	2220      	movs	r2, #32
 80025ea:	4013      	ands	r3, r2
 80025ec:	d008      	beq.n	8002600 <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d004      	beq.n	8002600 <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	0010      	movs	r0, r2
 80025fe:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2280      	movs	r2, #128	; 0x80
 8002604:	589b      	ldr	r3, [r3, r2]
 8002606:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	2240      	movs	r2, #64	; 0x40
 8002610:	4013      	ands	r3, r2
 8002612:	2b40      	cmp	r3, #64	; 0x40
 8002614:	d003      	beq.n	800261e <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2228      	movs	r2, #40	; 0x28
 800261a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800261c:	d033      	beq.n	8002686 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	0018      	movs	r0, r3
 8002622:	f000 fc53 	bl	8002ecc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2240      	movs	r2, #64	; 0x40
 800262e:	4013      	ands	r3, r2
 8002630:	2b40      	cmp	r3, #64	; 0x40
 8002632:	d123      	bne.n	800267c <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689a      	ldr	r2, [r3, #8]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2140      	movs	r1, #64	; 0x40
 8002640:	438a      	bics	r2, r1
 8002642:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002648:	2b00      	cmp	r3, #0
 800264a:	d012      	beq.n	8002672 <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002650:	4a4d      	ldr	r2, [pc, #308]	; (8002788 <HAL_UART_IRQHandler+0x2fc>)
 8002652:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002658:	0018      	movs	r0, r3
 800265a:	f7fe fb1d 	bl	8000c98 <HAL_DMA_Abort_IT>
 800265e:	1e03      	subs	r3, r0, #0
 8002660:	d01a      	beq.n	8002698 <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002666:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266c:	0018      	movs	r0, r3
 800266e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002670:	e012      	b.n	8002698 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	0018      	movs	r0, r3
 8002676:	f000 f8f7 	bl	8002868 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800267a:	e00d      	b.n	8002698 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	0018      	movs	r0, r3
 8002680:	f000 f8f2 	bl	8002868 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002684:	e008      	b.n	8002698 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	0018      	movs	r0, r3
 800268a:	f000 f8ed 	bl	8002868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2280      	movs	r2, #128	; 0x80
 8002692:	2100      	movs	r1, #0
 8002694:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002696:	e0da      	b.n	800284e <HAL_UART_IRQHandler+0x3c2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002698:	46c0      	nop			; (mov r8, r8)
    return;
 800269a:	e0d8      	b.n	800284e <HAL_UART_IRQHandler+0x3c2>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d000      	beq.n	80026a6 <HAL_UART_IRQHandler+0x21a>
 80026a4:	e0b2      	b.n	800280c <HAL_UART_IRQHandler+0x380>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	2210      	movs	r2, #16
 80026aa:	4013      	ands	r3, r2
 80026ac:	d100      	bne.n	80026b0 <HAL_UART_IRQHandler+0x224>
 80026ae:	e0ad      	b.n	800280c <HAL_UART_IRQHandler+0x380>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	2210      	movs	r2, #16
 80026b4:	4013      	ands	r3, r2
 80026b6:	d100      	bne.n	80026ba <HAL_UART_IRQHandler+0x22e>
 80026b8:	e0a8      	b.n	800280c <HAL_UART_IRQHandler+0x380>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2210      	movs	r2, #16
 80026c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	2240      	movs	r2, #64	; 0x40
 80026ca:	4013      	ands	r3, r2
 80026cc:	2b40      	cmp	r3, #64	; 0x40
 80026ce:	d15f      	bne.n	8002790 <HAL_UART_IRQHandler+0x304>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	2108      	movs	r1, #8
 80026da:	187b      	adds	r3, r7, r1
 80026dc:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 80026de:	187b      	adds	r3, r7, r1
 80026e0:	881b      	ldrh	r3, [r3, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d100      	bne.n	80026e8 <HAL_UART_IRQHandler+0x25c>
 80026e6:	e0b4      	b.n	8002852 <HAL_UART_IRQHandler+0x3c6>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2258      	movs	r2, #88	; 0x58
 80026ec:	5a9b      	ldrh	r3, [r3, r2]
 80026ee:	187a      	adds	r2, r7, r1
 80026f0:	8812      	ldrh	r2, [r2, #0]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d300      	bcc.n	80026f8 <HAL_UART_IRQHandler+0x26c>
 80026f6:	e0ac      	b.n	8002852 <HAL_UART_IRQHandler+0x3c6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	187a      	adds	r2, r7, r1
 80026fc:	215a      	movs	r1, #90	; 0x5a
 80026fe:	8812      	ldrh	r2, [r2, #0]
 8002700:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	2b20      	cmp	r3, #32
 800270a:	d02a      	beq.n	8002762 <HAL_UART_IRQHandler+0x2d6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	491d      	ldr	r1, [pc, #116]	; (800278c <HAL_UART_IRQHandler+0x300>)
 8002718:	400a      	ands	r2, r1
 800271a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2101      	movs	r1, #1
 8002728:	438a      	bics	r2, r1
 800272a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689a      	ldr	r2, [r3, #8]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2140      	movs	r1, #64	; 0x40
 8002738:	438a      	bics	r2, r1
 800273a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2220      	movs	r2, #32
 8002740:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2110      	movs	r1, #16
 8002754:	438a      	bics	r2, r1
 8002756:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275c:	0018      	movs	r0, r3
 800275e:	f7fe fa63 	bl	8000c28 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2258      	movs	r2, #88	; 0x58
 8002766:	5a9a      	ldrh	r2, [r3, r2]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	215a      	movs	r1, #90	; 0x5a
 800276c:	5a5b      	ldrh	r3, [r3, r1]
 800276e:	b29b      	uxth	r3, r3
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	b29a      	uxth	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	0011      	movs	r1, r2
 8002778:	0018      	movs	r0, r3
 800277a:	f000 f87d 	bl	8002878 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800277e:	e068      	b.n	8002852 <HAL_UART_IRQHandler+0x3c6>
 8002780:	0000080f 	.word	0x0000080f
 8002784:	04000120 	.word	0x04000120
 8002788:	08002f2d 	.word	0x08002f2d
 800278c:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2258      	movs	r2, #88	; 0x58
 8002794:	5a99      	ldrh	r1, [r3, r2]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	225a      	movs	r2, #90	; 0x5a
 800279a:	5a9b      	ldrh	r3, [r3, r2]
 800279c:	b29a      	uxth	r2, r3
 800279e:	200a      	movs	r0, #10
 80027a0:	183b      	adds	r3, r7, r0
 80027a2:	1a8a      	subs	r2, r1, r2
 80027a4:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	225a      	movs	r2, #90	; 0x5a
 80027aa:	5a9b      	ldrh	r3, [r3, r2]
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d051      	beq.n	8002856 <HAL_UART_IRQHandler+0x3ca>
          &&(nb_rx_data > 0U) )
 80027b2:	183b      	adds	r3, r7, r0
 80027b4:	881b      	ldrh	r3, [r3, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d04d      	beq.n	8002856 <HAL_UART_IRQHandler+0x3ca>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4927      	ldr	r1, [pc, #156]	; (8002864 <HAL_UART_IRQHandler+0x3d8>)
 80027c6:	400a      	ands	r2, r1
 80027c8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	689a      	ldr	r2, [r3, #8]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2101      	movs	r1, #1
 80027d6:	438a      	bics	r2, r1
 80027d8:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2220      	movs	r2, #32
 80027de:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2110      	movs	r1, #16
 80027f8:	438a      	bics	r2, r1
 80027fa:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80027fc:	183b      	adds	r3, r7, r0
 80027fe:	881a      	ldrh	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	0011      	movs	r1, r2
 8002804:	0018      	movs	r0, r3
 8002806:	f000 f837 	bl	8002878 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800280a:	e024      	b.n	8002856 <HAL_UART_IRQHandler+0x3ca>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	2280      	movs	r2, #128	; 0x80
 8002810:	4013      	ands	r3, r2
 8002812:	d00d      	beq.n	8002830 <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	2280      	movs	r2, #128	; 0x80
 8002818:	4013      	ands	r3, r2
 800281a:	d009      	beq.n	8002830 <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002820:	2b00      	cmp	r3, #0
 8002822:	d01a      	beq.n	800285a <HAL_UART_IRQHandler+0x3ce>
    {
      huart->TxISR(huart);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	0010      	movs	r0, r2
 800282c:	4798      	blx	r3
    }
    return;
 800282e:	e014      	b.n	800285a <HAL_UART_IRQHandler+0x3ce>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	2240      	movs	r2, #64	; 0x40
 8002834:	4013      	ands	r3, r2
 8002836:	d011      	beq.n	800285c <HAL_UART_IRQHandler+0x3d0>
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	2240      	movs	r2, #64	; 0x40
 800283c:	4013      	ands	r3, r2
 800283e:	d00d      	beq.n	800285c <HAL_UART_IRQHandler+0x3d0>
  {
    UART_EndTransmit_IT(huart);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	0018      	movs	r0, r3
 8002844:	f000 fbfd 	bl	8003042 <UART_EndTransmit_IT>
    return;
 8002848:	e008      	b.n	800285c <HAL_UART_IRQHandler+0x3d0>
      return;
 800284a:	46c0      	nop			; (mov r8, r8)
 800284c:	e006      	b.n	800285c <HAL_UART_IRQHandler+0x3d0>
    return;
 800284e:	46c0      	nop			; (mov r8, r8)
 8002850:	e004      	b.n	800285c <HAL_UART_IRQHandler+0x3d0>
      return;
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	e002      	b.n	800285c <HAL_UART_IRQHandler+0x3d0>
      return;
 8002856:	46c0      	nop			; (mov r8, r8)
 8002858:	e000      	b.n	800285c <HAL_UART_IRQHandler+0x3d0>
    return;
 800285a:	46c0      	nop			; (mov r8, r8)
  }

}
 800285c:	46bd      	mov	sp, r7
 800285e:	b008      	add	sp, #32
 8002860:	bd80      	pop	{r7, pc}
 8002862:	46c0      	nop			; (mov r8, r8)
 8002864:	fffffedf 	.word	0xfffffedf

08002868 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002870:	46c0      	nop			; (mov r8, r8)
 8002872:	46bd      	mov	sp, r7
 8002874:	b002      	add	sp, #8
 8002876:	bd80      	pop	{r7, pc}

08002878 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	000a      	movs	r2, r1
 8002882:	1cbb      	adds	r3, r7, #2
 8002884:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002886:	46c0      	nop			; (mov r8, r8)
 8002888:	46bd      	mov	sp, r7
 800288a:	b002      	add	sp, #8
 800288c:	bd80      	pop	{r7, pc}
	...

08002890 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b088      	sub	sp, #32
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002898:	231e      	movs	r3, #30
 800289a:	18fb      	adds	r3, r7, r3
 800289c:	2200      	movs	r2, #0
 800289e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	431a      	orrs	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a84      	ldr	r2, [pc, #528]	; (8002ad0 <UART_SetConfig+0x240>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	0019      	movs	r1, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	4a7f      	ldr	r2, [pc, #508]	; (8002ad4 <UART_SetConfig+0x244>)
 80028d6:	4013      	ands	r3, r2
 80028d8:	0019      	movs	r1, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68da      	ldr	r2, [r3, #12]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	4a76      	ldr	r2, [pc, #472]	; (8002ad8 <UART_SetConfig+0x248>)
 80028fe:	4013      	ands	r3, r2
 8002900:	0019      	movs	r1, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	430a      	orrs	r2, r1
 800290a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800290c:	4b73      	ldr	r3, [pc, #460]	; (8002adc <UART_SetConfig+0x24c>)
 800290e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002910:	2203      	movs	r2, #3
 8002912:	4013      	ands	r3, r2
 8002914:	2b03      	cmp	r3, #3
 8002916:	d00d      	beq.n	8002934 <UART_SetConfig+0xa4>
 8002918:	d81b      	bhi.n	8002952 <UART_SetConfig+0xc2>
 800291a:	2b02      	cmp	r3, #2
 800291c:	d014      	beq.n	8002948 <UART_SetConfig+0xb8>
 800291e:	d818      	bhi.n	8002952 <UART_SetConfig+0xc2>
 8002920:	2b00      	cmp	r3, #0
 8002922:	d002      	beq.n	800292a <UART_SetConfig+0x9a>
 8002924:	2b01      	cmp	r3, #1
 8002926:	d00a      	beq.n	800293e <UART_SetConfig+0xae>
 8002928:	e013      	b.n	8002952 <UART_SetConfig+0xc2>
 800292a:	231f      	movs	r3, #31
 800292c:	18fb      	adds	r3, r7, r3
 800292e:	2200      	movs	r2, #0
 8002930:	701a      	strb	r2, [r3, #0]
 8002932:	e012      	b.n	800295a <UART_SetConfig+0xca>
 8002934:	231f      	movs	r3, #31
 8002936:	18fb      	adds	r3, r7, r3
 8002938:	2202      	movs	r2, #2
 800293a:	701a      	strb	r2, [r3, #0]
 800293c:	e00d      	b.n	800295a <UART_SetConfig+0xca>
 800293e:	231f      	movs	r3, #31
 8002940:	18fb      	adds	r3, r7, r3
 8002942:	2204      	movs	r2, #4
 8002944:	701a      	strb	r2, [r3, #0]
 8002946:	e008      	b.n	800295a <UART_SetConfig+0xca>
 8002948:	231f      	movs	r3, #31
 800294a:	18fb      	adds	r3, r7, r3
 800294c:	2208      	movs	r2, #8
 800294e:	701a      	strb	r2, [r3, #0]
 8002950:	e003      	b.n	800295a <UART_SetConfig+0xca>
 8002952:	231f      	movs	r3, #31
 8002954:	18fb      	adds	r3, r7, r3
 8002956:	2210      	movs	r2, #16
 8002958:	701a      	strb	r2, [r3, #0]
 800295a:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	69da      	ldr	r2, [r3, #28]
 8002960:	2380      	movs	r3, #128	; 0x80
 8002962:	021b      	lsls	r3, r3, #8
 8002964:	429a      	cmp	r2, r3
 8002966:	d15d      	bne.n	8002a24 <UART_SetConfig+0x194>
  {
    switch (clocksource)
 8002968:	231f      	movs	r3, #31
 800296a:	18fb      	adds	r3, r7, r3
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b08      	cmp	r3, #8
 8002970:	d015      	beq.n	800299e <UART_SetConfig+0x10e>
 8002972:	dc18      	bgt.n	80029a6 <UART_SetConfig+0x116>
 8002974:	2b04      	cmp	r3, #4
 8002976:	d00d      	beq.n	8002994 <UART_SetConfig+0x104>
 8002978:	dc15      	bgt.n	80029a6 <UART_SetConfig+0x116>
 800297a:	2b00      	cmp	r3, #0
 800297c:	d002      	beq.n	8002984 <UART_SetConfig+0xf4>
 800297e:	2b02      	cmp	r3, #2
 8002980:	d005      	beq.n	800298e <UART_SetConfig+0xfe>
 8002982:	e010      	b.n	80029a6 <UART_SetConfig+0x116>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002984:	f7fe ffcc 	bl	8001920 <HAL_RCC_GetPCLK1Freq>
 8002988:	0003      	movs	r3, r0
 800298a:	61bb      	str	r3, [r7, #24]
        break;
 800298c:	e012      	b.n	80029b4 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800298e:	4b54      	ldr	r3, [pc, #336]	; (8002ae0 <UART_SetConfig+0x250>)
 8002990:	61bb      	str	r3, [r7, #24]
        break;
 8002992:	e00f      	b.n	80029b4 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002994:	f7fe ff56 	bl	8001844 <HAL_RCC_GetSysClockFreq>
 8002998:	0003      	movs	r3, r0
 800299a:	61bb      	str	r3, [r7, #24]
        break;
 800299c:	e00a      	b.n	80029b4 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800299e:	2380      	movs	r3, #128	; 0x80
 80029a0:	021b      	lsls	r3, r3, #8
 80029a2:	61bb      	str	r3, [r7, #24]
        break;
 80029a4:	e006      	b.n	80029b4 <UART_SetConfig+0x124>
      default:
        pclk = 0U;
 80029a6:	2300      	movs	r3, #0
 80029a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80029aa:	231e      	movs	r3, #30
 80029ac:	18fb      	adds	r3, r7, r3
 80029ae:	2201      	movs	r2, #1
 80029b0:	701a      	strb	r2, [r3, #0]
        break;
 80029b2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d100      	bne.n	80029bc <UART_SetConfig+0x12c>
 80029ba:	e07b      	b.n	8002ab4 <UART_SetConfig+0x224>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	005a      	lsls	r2, r3, #1
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	085b      	lsrs	r3, r3, #1
 80029c6:	18d2      	adds	r2, r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	0019      	movs	r1, r3
 80029ce:	0010      	movs	r0, r2
 80029d0:	f7fd fb9a 	bl	8000108 <__udivsi3>
 80029d4:	0003      	movs	r3, r0
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	2b0f      	cmp	r3, #15
 80029de:	d91c      	bls.n	8002a1a <UART_SetConfig+0x18a>
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	2380      	movs	r3, #128	; 0x80
 80029e4:	025b      	lsls	r3, r3, #9
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d217      	bcs.n	8002a1a <UART_SetConfig+0x18a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	200e      	movs	r0, #14
 80029f0:	183b      	adds	r3, r7, r0
 80029f2:	210f      	movs	r1, #15
 80029f4:	438a      	bics	r2, r1
 80029f6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	085b      	lsrs	r3, r3, #1
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	2207      	movs	r2, #7
 8002a00:	4013      	ands	r3, r2
 8002a02:	b299      	uxth	r1, r3
 8002a04:	183b      	adds	r3, r7, r0
 8002a06:	183a      	adds	r2, r7, r0
 8002a08:	8812      	ldrh	r2, [r2, #0]
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	183a      	adds	r2, r7, r0
 8002a14:	8812      	ldrh	r2, [r2, #0]
 8002a16:	60da      	str	r2, [r3, #12]
 8002a18:	e04c      	b.n	8002ab4 <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 8002a1a:	231e      	movs	r3, #30
 8002a1c:	18fb      	adds	r3, r7, r3
 8002a1e:	2201      	movs	r2, #1
 8002a20:	701a      	strb	r2, [r3, #0]
 8002a22:	e047      	b.n	8002ab4 <UART_SetConfig+0x224>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a24:	231f      	movs	r3, #31
 8002a26:	18fb      	adds	r3, r7, r3
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2b08      	cmp	r3, #8
 8002a2c:	d015      	beq.n	8002a5a <UART_SetConfig+0x1ca>
 8002a2e:	dc18      	bgt.n	8002a62 <UART_SetConfig+0x1d2>
 8002a30:	2b04      	cmp	r3, #4
 8002a32:	d00d      	beq.n	8002a50 <UART_SetConfig+0x1c0>
 8002a34:	dc15      	bgt.n	8002a62 <UART_SetConfig+0x1d2>
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d002      	beq.n	8002a40 <UART_SetConfig+0x1b0>
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d005      	beq.n	8002a4a <UART_SetConfig+0x1ba>
 8002a3e:	e010      	b.n	8002a62 <UART_SetConfig+0x1d2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a40:	f7fe ff6e 	bl	8001920 <HAL_RCC_GetPCLK1Freq>
 8002a44:	0003      	movs	r3, r0
 8002a46:	61bb      	str	r3, [r7, #24]
        break;
 8002a48:	e012      	b.n	8002a70 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a4a:	4b25      	ldr	r3, [pc, #148]	; (8002ae0 <UART_SetConfig+0x250>)
 8002a4c:	61bb      	str	r3, [r7, #24]
        break;
 8002a4e:	e00f      	b.n	8002a70 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a50:	f7fe fef8 	bl	8001844 <HAL_RCC_GetSysClockFreq>
 8002a54:	0003      	movs	r3, r0
 8002a56:	61bb      	str	r3, [r7, #24]
        break;
 8002a58:	e00a      	b.n	8002a70 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a5a:	2380      	movs	r3, #128	; 0x80
 8002a5c:	021b      	lsls	r3, r3, #8
 8002a5e:	61bb      	str	r3, [r7, #24]
        break;
 8002a60:	e006      	b.n	8002a70 <UART_SetConfig+0x1e0>
      default:
        pclk = 0U;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a66:	231e      	movs	r3, #30
 8002a68:	18fb      	adds	r3, r7, r3
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	701a      	strb	r2, [r3, #0]
        break;
 8002a6e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d01e      	beq.n	8002ab4 <UART_SetConfig+0x224>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	085a      	lsrs	r2, r3, #1
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	18d2      	adds	r2, r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	0019      	movs	r1, r3
 8002a86:	0010      	movs	r0, r2
 8002a88:	f7fd fb3e 	bl	8000108 <__udivsi3>
 8002a8c:	0003      	movs	r3, r0
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	2b0f      	cmp	r3, #15
 8002a96:	d909      	bls.n	8002aac <UART_SetConfig+0x21c>
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	2380      	movs	r3, #128	; 0x80
 8002a9c:	025b      	lsls	r3, r3, #9
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d204      	bcs.n	8002aac <UART_SetConfig+0x21c>
      {
        huart->Instance->BRR = usartdiv;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	60da      	str	r2, [r3, #12]
 8002aaa:	e003      	b.n	8002ab4 <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 8002aac:	231e      	movs	r3, #30
 8002aae:	18fb      	adds	r3, r7, r3
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002ac0:	231e      	movs	r3, #30
 8002ac2:	18fb      	adds	r3, r7, r3
 8002ac4:	781b      	ldrb	r3, [r3, #0]
}
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	b008      	add	sp, #32
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	ffff69f3 	.word	0xffff69f3
 8002ad4:	ffffcfff 	.word	0xffffcfff
 8002ad8:	fffff4ff 	.word	0xfffff4ff
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	007a1200 	.word	0x007a1200

08002ae4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af0:	2201      	movs	r2, #1
 8002af2:	4013      	ands	r3, r2
 8002af4:	d00b      	beq.n	8002b0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	4a4a      	ldr	r2, [pc, #296]	; (8002c28 <UART_AdvFeatureConfig+0x144>)
 8002afe:	4013      	ands	r3, r2
 8002b00:	0019      	movs	r1, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b12:	2202      	movs	r2, #2
 8002b14:	4013      	ands	r3, r2
 8002b16:	d00b      	beq.n	8002b30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	4a43      	ldr	r2, [pc, #268]	; (8002c2c <UART_AdvFeatureConfig+0x148>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	0019      	movs	r1, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	2204      	movs	r2, #4
 8002b36:	4013      	ands	r3, r2
 8002b38:	d00b      	beq.n	8002b52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	4a3b      	ldr	r2, [pc, #236]	; (8002c30 <UART_AdvFeatureConfig+0x14c>)
 8002b42:	4013      	ands	r3, r2
 8002b44:	0019      	movs	r1, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b56:	2208      	movs	r2, #8
 8002b58:	4013      	ands	r3, r2
 8002b5a:	d00b      	beq.n	8002b74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	4a34      	ldr	r2, [pc, #208]	; (8002c34 <UART_AdvFeatureConfig+0x150>)
 8002b64:	4013      	ands	r3, r2
 8002b66:	0019      	movs	r1, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	430a      	orrs	r2, r1
 8002b72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b78:	2210      	movs	r2, #16
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	d00b      	beq.n	8002b96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	4a2c      	ldr	r2, [pc, #176]	; (8002c38 <UART_AdvFeatureConfig+0x154>)
 8002b86:	4013      	ands	r3, r2
 8002b88:	0019      	movs	r1, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	d00b      	beq.n	8002bb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	4a25      	ldr	r2, [pc, #148]	; (8002c3c <UART_AdvFeatureConfig+0x158>)
 8002ba8:	4013      	ands	r3, r2
 8002baa:	0019      	movs	r1, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbc:	2240      	movs	r2, #64	; 0x40
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	d01d      	beq.n	8002bfe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	4a1d      	ldr	r2, [pc, #116]	; (8002c40 <UART_AdvFeatureConfig+0x15c>)
 8002bca:	4013      	ands	r3, r2
 8002bcc:	0019      	movs	r1, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bde:	2380      	movs	r3, #128	; 0x80
 8002be0:	035b      	lsls	r3, r3, #13
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d10b      	bne.n	8002bfe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	4a15      	ldr	r2, [pc, #84]	; (8002c44 <UART_AdvFeatureConfig+0x160>)
 8002bee:	4013      	ands	r3, r2
 8002bf0:	0019      	movs	r1, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c02:	2280      	movs	r2, #128	; 0x80
 8002c04:	4013      	ands	r3, r2
 8002c06:	d00b      	beq.n	8002c20 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	4a0e      	ldr	r2, [pc, #56]	; (8002c48 <UART_AdvFeatureConfig+0x164>)
 8002c10:	4013      	ands	r3, r2
 8002c12:	0019      	movs	r1, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	605a      	str	r2, [r3, #4]
  }
}
 8002c20:	46c0      	nop			; (mov r8, r8)
 8002c22:	46bd      	mov	sp, r7
 8002c24:	b002      	add	sp, #8
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	fffdffff 	.word	0xfffdffff
 8002c2c:	fffeffff 	.word	0xfffeffff
 8002c30:	fffbffff 	.word	0xfffbffff
 8002c34:	ffff7fff 	.word	0xffff7fff
 8002c38:	ffffefff 	.word	0xffffefff
 8002c3c:	ffffdfff 	.word	0xffffdfff
 8002c40:	ffefffff 	.word	0xffefffff
 8002c44:	ff9fffff 	.word	0xff9fffff
 8002c48:	fff7ffff 	.word	0xfff7ffff

08002c4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af02      	add	r7, sp, #8
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2280      	movs	r2, #128	; 0x80
 8002c58:	2100      	movs	r1, #0
 8002c5a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c5c:	f7fd fefc 	bl	8000a58 <HAL_GetTick>
 8002c60:	0003      	movs	r3, r0
 8002c62:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2208      	movs	r2, #8
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	2b08      	cmp	r3, #8
 8002c70:	d10c      	bne.n	8002c8c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2280      	movs	r2, #128	; 0x80
 8002c76:	0391      	lsls	r1, r2, #14
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	4a17      	ldr	r2, [pc, #92]	; (8002cd8 <UART_CheckIdleState+0x8c>)
 8002c7c:	9200      	str	r2, [sp, #0]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f000 f82c 	bl	8002cdc <UART_WaitOnFlagUntilTimeout>
 8002c84:	1e03      	subs	r3, r0, #0
 8002c86:	d001      	beq.n	8002c8c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e021      	b.n	8002cd0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2204      	movs	r2, #4
 8002c94:	4013      	ands	r3, r2
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	d10c      	bne.n	8002cb4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2280      	movs	r2, #128	; 0x80
 8002c9e:	03d1      	lsls	r1, r2, #15
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	4a0d      	ldr	r2, [pc, #52]	; (8002cd8 <UART_CheckIdleState+0x8c>)
 8002ca4:	9200      	str	r2, [sp, #0]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f000 f818 	bl	8002cdc <UART_WaitOnFlagUntilTimeout>
 8002cac:	1e03      	subs	r3, r0, #0
 8002cae:	d001      	beq.n	8002cb4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e00d      	b.n	8002cd0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2274      	movs	r2, #116	; 0x74
 8002cca:	2100      	movs	r1, #0
 8002ccc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	b004      	add	sp, #16
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	01ffffff 	.word	0x01ffffff

08002cdc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	603b      	str	r3, [r7, #0]
 8002ce8:	1dfb      	adds	r3, r7, #7
 8002cea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cec:	e05e      	b.n	8002dac <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	d05b      	beq.n	8002dac <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cf4:	f7fd feb0 	bl	8000a58 <HAL_GetTick>
 8002cf8:	0002      	movs	r2, r0
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d302      	bcc.n	8002d0a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d11b      	bne.n	8002d42 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	492f      	ldr	r1, [pc, #188]	; (8002dd4 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002d16:	400a      	ands	r2, r1
 8002d18:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2101      	movs	r1, #1
 8002d26:	438a      	bics	r2, r1
 8002d28:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2220      	movs	r2, #32
 8002d2e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2220      	movs	r2, #32
 8002d34:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2274      	movs	r2, #116	; 0x74
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e044      	b.n	8002dcc <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2204      	movs	r2, #4
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	d02e      	beq.n	8002dac <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	69da      	ldr	r2, [r3, #28]
 8002d54:	2380      	movs	r3, #128	; 0x80
 8002d56:	011b      	lsls	r3, r3, #4
 8002d58:	401a      	ands	r2, r3
 8002d5a:	2380      	movs	r3, #128	; 0x80
 8002d5c:	011b      	lsls	r3, r3, #4
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d124      	bne.n	8002dac <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2280      	movs	r2, #128	; 0x80
 8002d68:	0112      	lsls	r2, r2, #4
 8002d6a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4917      	ldr	r1, [pc, #92]	; (8002dd4 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002d78:	400a      	ands	r2, r1
 8002d7a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689a      	ldr	r2, [r3, #8]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2101      	movs	r1, #1
 8002d88:	438a      	bics	r2, r1
 8002d8a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2220      	movs	r2, #32
 8002d90:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2220      	movs	r2, #32
 8002d96:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2280      	movs	r2, #128	; 0x80
 8002d9c:	2120      	movs	r1, #32
 8002d9e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2274      	movs	r2, #116	; 0x74
 8002da4:	2100      	movs	r1, #0
 8002da6:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e00f      	b.n	8002dcc <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	4013      	ands	r3, r2
 8002db6:	68ba      	ldr	r2, [r7, #8]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	425a      	negs	r2, r3
 8002dbc:	4153      	adcs	r3, r2
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	001a      	movs	r2, r3
 8002dc2:	1dfb      	adds	r3, r7, #7
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d091      	beq.n	8002cee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	0018      	movs	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	b004      	add	sp, #16
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	fffffe5f 	.word	0xfffffe5f

08002dd8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	1dbb      	adds	r3, r7, #6
 8002de4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	68ba      	ldr	r2, [r7, #8]
 8002dea:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	1dba      	adds	r2, r7, #6
 8002df0:	2158      	movs	r1, #88	; 0x58
 8002df2:	8812      	ldrh	r2, [r2, #0]
 8002df4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	1dba      	adds	r2, r7, #6
 8002dfa:	215a      	movs	r1, #90	; 0x5a
 8002dfc:	8812      	ldrh	r2, [r2, #0]
 8002dfe:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	689a      	ldr	r2, [r3, #8]
 8002e0a:	2380      	movs	r3, #128	; 0x80
 8002e0c:	015b      	lsls	r3, r3, #5
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d10d      	bne.n	8002e2e <UART_Start_Receive_IT+0x56>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d104      	bne.n	8002e24 <UART_Start_Receive_IT+0x4c>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	225c      	movs	r2, #92	; 0x5c
 8002e1e:	4928      	ldr	r1, [pc, #160]	; (8002ec0 <UART_Start_Receive_IT+0xe8>)
 8002e20:	5299      	strh	r1, [r3, r2]
 8002e22:	e01a      	b.n	8002e5a <UART_Start_Receive_IT+0x82>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	225c      	movs	r2, #92	; 0x5c
 8002e28:	21ff      	movs	r1, #255	; 0xff
 8002e2a:	5299      	strh	r1, [r3, r2]
 8002e2c:	e015      	b.n	8002e5a <UART_Start_Receive_IT+0x82>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10d      	bne.n	8002e52 <UART_Start_Receive_IT+0x7a>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d104      	bne.n	8002e48 <UART_Start_Receive_IT+0x70>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	225c      	movs	r2, #92	; 0x5c
 8002e42:	21ff      	movs	r1, #255	; 0xff
 8002e44:	5299      	strh	r1, [r3, r2]
 8002e46:	e008      	b.n	8002e5a <UART_Start_Receive_IT+0x82>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	225c      	movs	r2, #92	; 0x5c
 8002e4c:	217f      	movs	r1, #127	; 0x7f
 8002e4e:	5299      	strh	r1, [r3, r2]
 8002e50:	e003      	b.n	8002e5a <UART_Start_Receive_IT+0x82>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	225c      	movs	r2, #92	; 0x5c
 8002e56:	2100      	movs	r1, #0
 8002e58:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2280      	movs	r2, #128	; 0x80
 8002e5e:	2100      	movs	r1, #0
 8002e60:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2222      	movs	r2, #34	; 0x22
 8002e66:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689a      	ldr	r2, [r3, #8]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2101      	movs	r1, #1
 8002e74:	430a      	orrs	r2, r1
 8002e76:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	2380      	movs	r3, #128	; 0x80
 8002e7e:	015b      	lsls	r3, r3, #5
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d107      	bne.n	8002e94 <UART_Start_Receive_IT+0xbc>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d103      	bne.n	8002e94 <UART_Start_Receive_IT+0xbc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	4a0d      	ldr	r2, [pc, #52]	; (8002ec4 <UART_Start_Receive_IT+0xec>)
 8002e90:	665a      	str	r2, [r3, #100]	; 0x64
 8002e92:	e002      	b.n	8002e9a <UART_Start_Receive_IT+0xc2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	4a0c      	ldr	r2, [pc, #48]	; (8002ec8 <UART_Start_Receive_IT+0xf0>)
 8002e98:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2274      	movs	r2, #116	; 0x74
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2190      	movs	r1, #144	; 0x90
 8002eae:	0049      	lsls	r1, r1, #1
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	b004      	add	sp, #16
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	000001ff 	.word	0x000001ff
 8002ec4:	08003161 	.word	0x08003161
 8002ec8:	08003079 	.word	0x08003079

08002ecc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4912      	ldr	r1, [pc, #72]	; (8002f28 <UART_EndRxTransfer+0x5c>)
 8002ee0:	400a      	ands	r2, r1
 8002ee2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689a      	ldr	r2, [r3, #8]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2101      	movs	r1, #1
 8002ef0:	438a      	bics	r2, r1
 8002ef2:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d107      	bne.n	8002f0c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2110      	movs	r1, #16
 8002f08:	438a      	bics	r2, r1
 8002f0a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	665a      	str	r2, [r3, #100]	; 0x64
}
 8002f1e:	46c0      	nop			; (mov r8, r8)
 8002f20:	46bd      	mov	sp, r7
 8002f22:	b002      	add	sp, #8
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	46c0      	nop			; (mov r8, r8)
 8002f28:	fffffedf 	.word	0xfffffedf

08002f2c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	225a      	movs	r2, #90	; 0x5a
 8002f3e:	2100      	movs	r1, #0
 8002f40:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2252      	movs	r2, #82	; 0x52
 8002f46:	2100      	movs	r1, #0
 8002f48:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	f7ff fc8b 	bl	8002868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f52:	46c0      	nop			; (mov r8, r8)
 8002f54:	46bd      	mov	sp, r7
 8002f56:	b004      	add	sp, #16
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b082      	sub	sp, #8
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f66:	2b21      	cmp	r3, #33	; 0x21
 8002f68:	d12b      	bne.n	8002fc2 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2252      	movs	r2, #82	; 0x52
 8002f6e:	5a9b      	ldrh	r3, [r3, r2]
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d110      	bne.n	8002f98 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2180      	movs	r1, #128	; 0x80
 8002f82:	438a      	bics	r2, r1
 8002f84:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2140      	movs	r1, #64	; 0x40
 8002f92:	430a      	orrs	r2, r1
 8002f94:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8002f96:	e014      	b.n	8002fc2 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f9c:	781a      	ldrb	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	b292      	uxth	r2, r2
 8002fa4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002faa:	1c5a      	adds	r2, r3, #1
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2252      	movs	r2, #82	; 0x52
 8002fb4:	5a9b      	ldrh	r3, [r3, r2]
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	b299      	uxth	r1, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2252      	movs	r2, #82	; 0x52
 8002fc0:	5299      	strh	r1, [r3, r2]
}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	b002      	add	sp, #8
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b084      	sub	sp, #16
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fd6:	2b21      	cmp	r3, #33	; 0x21
 8002fd8:	d12f      	bne.n	800303a <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2252      	movs	r2, #82	; 0x52
 8002fde:	5a9b      	ldrh	r3, [r3, r2]
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d110      	bne.n	8003008 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2180      	movs	r1, #128	; 0x80
 8002ff2:	438a      	bics	r2, r1
 8002ff4:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2140      	movs	r1, #64	; 0x40
 8003002:	430a      	orrs	r2, r1
 8003004:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003006:	e018      	b.n	800303a <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800300c:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	881a      	ldrh	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	05d2      	lsls	r2, r2, #23
 8003018:	0dd2      	lsrs	r2, r2, #23
 800301a:	b292      	uxth	r2, r2
 800301c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003022:	1c9a      	adds	r2, r3, #2
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2252      	movs	r2, #82	; 0x52
 800302c:	5a9b      	ldrh	r3, [r3, r2]
 800302e:	b29b      	uxth	r3, r3
 8003030:	3b01      	subs	r3, #1
 8003032:	b299      	uxth	r1, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2252      	movs	r2, #82	; 0x52
 8003038:	5299      	strh	r1, [r3, r2]
}
 800303a:	46c0      	nop			; (mov r8, r8)
 800303c:	46bd      	mov	sp, r7
 800303e:	b004      	add	sp, #16
 8003040:	bd80      	pop	{r7, pc}

08003042 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b082      	sub	sp, #8
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2140      	movs	r1, #64	; 0x40
 8003056:	438a      	bics	r2, r1
 8003058:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2220      	movs	r2, #32
 800305e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	0018      	movs	r0, r3
 800306a:	f7fd f9cf 	bl	800040c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	46bd      	mov	sp, r7
 8003072:	b002      	add	sp, #8
 8003074:	bd80      	pop	{r7, pc}
	...

08003078 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003080:	200e      	movs	r0, #14
 8003082:	183b      	adds	r3, r7, r0
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	215c      	movs	r1, #92	; 0x5c
 8003088:	5a52      	ldrh	r2, [r2, r1]
 800308a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003090:	2b22      	cmp	r3, #34	; 0x22
 8003092:	d157      	bne.n	8003144 <UART_RxISR_8BIT+0xcc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	210c      	movs	r1, #12
 800309a:	187b      	adds	r3, r7, r1
 800309c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800309e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80030a0:	187b      	adds	r3, r7, r1
 80030a2:	881b      	ldrh	r3, [r3, #0]
 80030a4:	b2da      	uxtb	r2, r3
 80030a6:	183b      	adds	r3, r7, r0
 80030a8:	881b      	ldrh	r3, [r3, #0]
 80030aa:	b2d9      	uxtb	r1, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b0:	400a      	ands	r2, r1
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ba:	1c5a      	adds	r2, r3, #1
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	225a      	movs	r2, #90	; 0x5a
 80030c4:	5a9b      	ldrh	r3, [r3, r2]
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	3b01      	subs	r3, #1
 80030ca:	b299      	uxth	r1, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	225a      	movs	r2, #90	; 0x5a
 80030d0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	225a      	movs	r2, #90	; 0x5a
 80030d6:	5a9b      	ldrh	r3, [r3, r2]
 80030d8:	b29b      	uxth	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d13a      	bne.n	8003154 <UART_RxISR_8BIT+0xdc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	491c      	ldr	r1, [pc, #112]	; (800315c <UART_RxISR_8BIT+0xe4>)
 80030ea:	400a      	ands	r2, r1
 80030ec:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2101      	movs	r1, #1
 80030fa:	438a      	bics	r2, r1
 80030fc:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2220      	movs	r2, #32
 8003102:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800310e:	2b01      	cmp	r3, #1
 8003110:	d110      	bne.n	8003134 <UART_RxISR_8BIT+0xbc>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2110      	movs	r1, #16
 800311e:	438a      	bics	r2, r1
 8003120:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2258      	movs	r2, #88	; 0x58
 8003126:	5a9a      	ldrh	r2, [r3, r2]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	0011      	movs	r1, r2
 800312c:	0018      	movs	r0, r3
 800312e:	f7ff fba3 	bl	8002878 <HAL_UARTEx_RxEventCallback>
 8003132:	e003      	b.n	800313c <UART_RxISR_8BIT+0xc4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	0018      	movs	r0, r3
 8003138:	f7fd f984 	bl	8000444 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003142:	e007      	b.n	8003154 <UART_RxISR_8BIT+0xdc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	699a      	ldr	r2, [r3, #24]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2108      	movs	r1, #8
 8003150:	430a      	orrs	r2, r1
 8003152:	619a      	str	r2, [r3, #24]
}
 8003154:	46c0      	nop			; (mov r8, r8)
 8003156:	46bd      	mov	sp, r7
 8003158:	b004      	add	sp, #16
 800315a:	bd80      	pop	{r7, pc}
 800315c:	fffffedf 	.word	0xfffffedf

08003160 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003168:	200e      	movs	r0, #14
 800316a:	183b      	adds	r3, r7, r0
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	215c      	movs	r1, #92	; 0x5c
 8003170:	5a52      	ldrh	r2, [r2, r1]
 8003172:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003178:	2b22      	cmp	r3, #34	; 0x22
 800317a:	d157      	bne.n	800322c <UART_RxISR_16BIT+0xcc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	210c      	movs	r1, #12
 8003182:	187b      	adds	r3, r7, r1
 8003184:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003186:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800318c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800318e:	187b      	adds	r3, r7, r1
 8003190:	183a      	adds	r2, r7, r0
 8003192:	881b      	ldrh	r3, [r3, #0]
 8003194:	8812      	ldrh	r2, [r2, #0]
 8003196:	4013      	ands	r3, r2
 8003198:	b29a      	uxth	r2, r3
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a2:	1c9a      	adds	r2, r3, #2
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	225a      	movs	r2, #90	; 0x5a
 80031ac:	5a9b      	ldrh	r3, [r3, r2]
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	3b01      	subs	r3, #1
 80031b2:	b299      	uxth	r1, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	225a      	movs	r2, #90	; 0x5a
 80031b8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	225a      	movs	r2, #90	; 0x5a
 80031be:	5a9b      	ldrh	r3, [r3, r2]
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d13a      	bne.n	800323c <UART_RxISR_16BIT+0xdc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	491c      	ldr	r1, [pc, #112]	; (8003244 <UART_RxISR_16BIT+0xe4>)
 80031d2:	400a      	ands	r2, r1
 80031d4:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2101      	movs	r1, #1
 80031e2:	438a      	bics	r2, r1
 80031e4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2220      	movs	r2, #32
 80031ea:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d110      	bne.n	800321c <UART_RxISR_16BIT+0xbc>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2110      	movs	r1, #16
 8003206:	438a      	bics	r2, r1
 8003208:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2258      	movs	r2, #88	; 0x58
 800320e:	5a9a      	ldrh	r2, [r3, r2]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	0011      	movs	r1, r2
 8003214:	0018      	movs	r0, r3
 8003216:	f7ff fb2f 	bl	8002878 <HAL_UARTEx_RxEventCallback>
 800321a:	e003      	b.n	8003224 <UART_RxISR_16BIT+0xc4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	0018      	movs	r0, r3
 8003220:	f7fd f910 	bl	8000444 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800322a:	e007      	b.n	800323c <UART_RxISR_16BIT+0xdc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	699a      	ldr	r2, [r3, #24]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2108      	movs	r1, #8
 8003238:	430a      	orrs	r2, r1
 800323a:	619a      	str	r2, [r3, #24]
}
 800323c:	46c0      	nop			; (mov r8, r8)
 800323e:	46bd      	mov	sp, r7
 8003240:	b004      	add	sp, #16
 8003242:	bd80      	pop	{r7, pc}
 8003244:	fffffedf 	.word	0xfffffedf

08003248 <atoi>:
 8003248:	b510      	push	{r4, lr}
 800324a:	220a      	movs	r2, #10
 800324c:	2100      	movs	r1, #0
 800324e:	f000 f8c1 	bl	80033d4 <strtol>
 8003252:	bd10      	pop	{r4, pc}

08003254 <__errno>:
 8003254:	4b01      	ldr	r3, [pc, #4]	; (800325c <__errno+0x8>)
 8003256:	6818      	ldr	r0, [r3, #0]
 8003258:	4770      	bx	lr
 800325a:	46c0      	nop			; (mov r8, r8)
 800325c:	2000000c 	.word	0x2000000c

08003260 <__libc_init_array>:
 8003260:	b570      	push	{r4, r5, r6, lr}
 8003262:	2600      	movs	r6, #0
 8003264:	4d0c      	ldr	r5, [pc, #48]	; (8003298 <__libc_init_array+0x38>)
 8003266:	4c0d      	ldr	r4, [pc, #52]	; (800329c <__libc_init_array+0x3c>)
 8003268:	1b64      	subs	r4, r4, r5
 800326a:	10a4      	asrs	r4, r4, #2
 800326c:	42a6      	cmp	r6, r4
 800326e:	d109      	bne.n	8003284 <__libc_init_array+0x24>
 8003270:	2600      	movs	r6, #0
 8003272:	f000 f8bb 	bl	80033ec <_init>
 8003276:	4d0a      	ldr	r5, [pc, #40]	; (80032a0 <__libc_init_array+0x40>)
 8003278:	4c0a      	ldr	r4, [pc, #40]	; (80032a4 <__libc_init_array+0x44>)
 800327a:	1b64      	subs	r4, r4, r5
 800327c:	10a4      	asrs	r4, r4, #2
 800327e:	42a6      	cmp	r6, r4
 8003280:	d105      	bne.n	800328e <__libc_init_array+0x2e>
 8003282:	bd70      	pop	{r4, r5, r6, pc}
 8003284:	00b3      	lsls	r3, r6, #2
 8003286:	58eb      	ldr	r3, [r5, r3]
 8003288:	4798      	blx	r3
 800328a:	3601      	adds	r6, #1
 800328c:	e7ee      	b.n	800326c <__libc_init_array+0xc>
 800328e:	00b3      	lsls	r3, r6, #2
 8003290:	58eb      	ldr	r3, [r5, r3]
 8003292:	4798      	blx	r3
 8003294:	3601      	adds	r6, #1
 8003296:	e7f2      	b.n	800327e <__libc_init_array+0x1e>
 8003298:	080035a0 	.word	0x080035a0
 800329c:	080035a0 	.word	0x080035a0
 80032a0:	080035a0 	.word	0x080035a0
 80032a4:	080035a4 	.word	0x080035a4

080032a8 <memset>:
 80032a8:	0003      	movs	r3, r0
 80032aa:	1882      	adds	r2, r0, r2
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d100      	bne.n	80032b2 <memset+0xa>
 80032b0:	4770      	bx	lr
 80032b2:	7019      	strb	r1, [r3, #0]
 80032b4:	3301      	adds	r3, #1
 80032b6:	e7f9      	b.n	80032ac <memset+0x4>

080032b8 <_strtol_l.isra.0>:
 80032b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032ba:	b087      	sub	sp, #28
 80032bc:	001e      	movs	r6, r3
 80032be:	9005      	str	r0, [sp, #20]
 80032c0:	9101      	str	r1, [sp, #4]
 80032c2:	9202      	str	r2, [sp, #8]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d045      	beq.n	8003354 <_strtol_l.isra.0+0x9c>
 80032c8:	0008      	movs	r0, r1
 80032ca:	2b24      	cmp	r3, #36	; 0x24
 80032cc:	d842      	bhi.n	8003354 <_strtol_l.isra.0+0x9c>
 80032ce:	4b3f      	ldr	r3, [pc, #252]	; (80033cc <_strtol_l.isra.0+0x114>)
 80032d0:	2208      	movs	r2, #8
 80032d2:	469c      	mov	ip, r3
 80032d4:	0003      	movs	r3, r0
 80032d6:	4661      	mov	r1, ip
 80032d8:	781c      	ldrb	r4, [r3, #0]
 80032da:	1c45      	adds	r5, r0, #1
 80032dc:	5d09      	ldrb	r1, [r1, r4]
 80032de:	0028      	movs	r0, r5
 80032e0:	000f      	movs	r7, r1
 80032e2:	4017      	ands	r7, r2
 80032e4:	4211      	tst	r1, r2
 80032e6:	d1f5      	bne.n	80032d4 <_strtol_l.isra.0+0x1c>
 80032e8:	2c2d      	cmp	r4, #45	; 0x2d
 80032ea:	d13a      	bne.n	8003362 <_strtol_l.isra.0+0xaa>
 80032ec:	2701      	movs	r7, #1
 80032ee:	782c      	ldrb	r4, [r5, #0]
 80032f0:	1c9d      	adds	r5, r3, #2
 80032f2:	2e00      	cmp	r6, #0
 80032f4:	d065      	beq.n	80033c2 <_strtol_l.isra.0+0x10a>
 80032f6:	2e10      	cmp	r6, #16
 80032f8:	d109      	bne.n	800330e <_strtol_l.isra.0+0x56>
 80032fa:	2c30      	cmp	r4, #48	; 0x30
 80032fc:	d107      	bne.n	800330e <_strtol_l.isra.0+0x56>
 80032fe:	2220      	movs	r2, #32
 8003300:	782b      	ldrb	r3, [r5, #0]
 8003302:	4393      	bics	r3, r2
 8003304:	2b58      	cmp	r3, #88	; 0x58
 8003306:	d157      	bne.n	80033b8 <_strtol_l.isra.0+0x100>
 8003308:	2610      	movs	r6, #16
 800330a:	786c      	ldrb	r4, [r5, #1]
 800330c:	3502      	adds	r5, #2
 800330e:	4b30      	ldr	r3, [pc, #192]	; (80033d0 <_strtol_l.isra.0+0x118>)
 8003310:	0031      	movs	r1, r6
 8003312:	18fb      	adds	r3, r7, r3
 8003314:	0018      	movs	r0, r3
 8003316:	9303      	str	r3, [sp, #12]
 8003318:	f7fc ff7c 	bl	8000214 <__aeabi_uidivmod>
 800331c:	2300      	movs	r3, #0
 800331e:	2201      	movs	r2, #1
 8003320:	4684      	mov	ip, r0
 8003322:	0018      	movs	r0, r3
 8003324:	9104      	str	r1, [sp, #16]
 8003326:	4252      	negs	r2, r2
 8003328:	0021      	movs	r1, r4
 800332a:	3930      	subs	r1, #48	; 0x30
 800332c:	2909      	cmp	r1, #9
 800332e:	d81d      	bhi.n	800336c <_strtol_l.isra.0+0xb4>
 8003330:	000c      	movs	r4, r1
 8003332:	42a6      	cmp	r6, r4
 8003334:	dd28      	ble.n	8003388 <_strtol_l.isra.0+0xd0>
 8003336:	2b00      	cmp	r3, #0
 8003338:	db24      	blt.n	8003384 <_strtol_l.isra.0+0xcc>
 800333a:	0013      	movs	r3, r2
 800333c:	4584      	cmp	ip, r0
 800333e:	d306      	bcc.n	800334e <_strtol_l.isra.0+0x96>
 8003340:	d102      	bne.n	8003348 <_strtol_l.isra.0+0x90>
 8003342:	9904      	ldr	r1, [sp, #16]
 8003344:	42a1      	cmp	r1, r4
 8003346:	db02      	blt.n	800334e <_strtol_l.isra.0+0x96>
 8003348:	2301      	movs	r3, #1
 800334a:	4370      	muls	r0, r6
 800334c:	1820      	adds	r0, r4, r0
 800334e:	782c      	ldrb	r4, [r5, #0]
 8003350:	3501      	adds	r5, #1
 8003352:	e7e9      	b.n	8003328 <_strtol_l.isra.0+0x70>
 8003354:	f7ff ff7e 	bl	8003254 <__errno>
 8003358:	2316      	movs	r3, #22
 800335a:	6003      	str	r3, [r0, #0]
 800335c:	2000      	movs	r0, #0
 800335e:	b007      	add	sp, #28
 8003360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003362:	2c2b      	cmp	r4, #43	; 0x2b
 8003364:	d1c5      	bne.n	80032f2 <_strtol_l.isra.0+0x3a>
 8003366:	782c      	ldrb	r4, [r5, #0]
 8003368:	1c9d      	adds	r5, r3, #2
 800336a:	e7c2      	b.n	80032f2 <_strtol_l.isra.0+0x3a>
 800336c:	0021      	movs	r1, r4
 800336e:	3941      	subs	r1, #65	; 0x41
 8003370:	2919      	cmp	r1, #25
 8003372:	d801      	bhi.n	8003378 <_strtol_l.isra.0+0xc0>
 8003374:	3c37      	subs	r4, #55	; 0x37
 8003376:	e7dc      	b.n	8003332 <_strtol_l.isra.0+0x7a>
 8003378:	0021      	movs	r1, r4
 800337a:	3961      	subs	r1, #97	; 0x61
 800337c:	2919      	cmp	r1, #25
 800337e:	d803      	bhi.n	8003388 <_strtol_l.isra.0+0xd0>
 8003380:	3c57      	subs	r4, #87	; 0x57
 8003382:	e7d6      	b.n	8003332 <_strtol_l.isra.0+0x7a>
 8003384:	0013      	movs	r3, r2
 8003386:	e7e2      	b.n	800334e <_strtol_l.isra.0+0x96>
 8003388:	2b00      	cmp	r3, #0
 800338a:	da09      	bge.n	80033a0 <_strtol_l.isra.0+0xe8>
 800338c:	2322      	movs	r3, #34	; 0x22
 800338e:	9a05      	ldr	r2, [sp, #20]
 8003390:	9803      	ldr	r0, [sp, #12]
 8003392:	6013      	str	r3, [r2, #0]
 8003394:	9b02      	ldr	r3, [sp, #8]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d0e1      	beq.n	800335e <_strtol_l.isra.0+0xa6>
 800339a:	1e6b      	subs	r3, r5, #1
 800339c:	9301      	str	r3, [sp, #4]
 800339e:	e007      	b.n	80033b0 <_strtol_l.isra.0+0xf8>
 80033a0:	2f00      	cmp	r7, #0
 80033a2:	d000      	beq.n	80033a6 <_strtol_l.isra.0+0xee>
 80033a4:	4240      	negs	r0, r0
 80033a6:	9a02      	ldr	r2, [sp, #8]
 80033a8:	2a00      	cmp	r2, #0
 80033aa:	d0d8      	beq.n	800335e <_strtol_l.isra.0+0xa6>
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1f4      	bne.n	800339a <_strtol_l.isra.0+0xe2>
 80033b0:	9b02      	ldr	r3, [sp, #8]
 80033b2:	9a01      	ldr	r2, [sp, #4]
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	e7d2      	b.n	800335e <_strtol_l.isra.0+0xa6>
 80033b8:	2430      	movs	r4, #48	; 0x30
 80033ba:	2e00      	cmp	r6, #0
 80033bc:	d1a7      	bne.n	800330e <_strtol_l.isra.0+0x56>
 80033be:	3608      	adds	r6, #8
 80033c0:	e7a5      	b.n	800330e <_strtol_l.isra.0+0x56>
 80033c2:	2c30      	cmp	r4, #48	; 0x30
 80033c4:	d09b      	beq.n	80032fe <_strtol_l.isra.0+0x46>
 80033c6:	260a      	movs	r6, #10
 80033c8:	e7a1      	b.n	800330e <_strtol_l.isra.0+0x56>
 80033ca:	46c0      	nop			; (mov r8, r8)
 80033cc:	0800343d 	.word	0x0800343d
 80033d0:	7fffffff 	.word	0x7fffffff

080033d4 <strtol>:
 80033d4:	b510      	push	{r4, lr}
 80033d6:	0013      	movs	r3, r2
 80033d8:	000a      	movs	r2, r1
 80033da:	0001      	movs	r1, r0
 80033dc:	4802      	ldr	r0, [pc, #8]	; (80033e8 <strtol+0x14>)
 80033de:	6800      	ldr	r0, [r0, #0]
 80033e0:	f7ff ff6a 	bl	80032b8 <_strtol_l.isra.0>
 80033e4:	bd10      	pop	{r4, pc}
 80033e6:	46c0      	nop			; (mov r8, r8)
 80033e8:	2000000c 	.word	0x2000000c

080033ec <_init>:
 80033ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ee:	46c0      	nop			; (mov r8, r8)
 80033f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033f2:	bc08      	pop	{r3}
 80033f4:	469e      	mov	lr, r3
 80033f6:	4770      	bx	lr

080033f8 <_fini>:
 80033f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033fa:	46c0      	nop			; (mov r8, r8)
 80033fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033fe:	bc08      	pop	{r3}
 8003400:	469e      	mov	lr, r3
 8003402:	4770      	bx	lr
